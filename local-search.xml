<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Typora设置自定义脚本上传图片</title>
    <link href="/2024/06/14/Typora%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E8%84%9A%E6%9C%AC%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"/>
    <url>/2024/06/14/Typora%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E8%84%9A%E6%9C%AC%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h3 id="搭建图床服务"><a href="#搭建图床服务" class="headerlink" title="搭建图床服务"></a>搭建图床服务</h3><blockquote><p>这里利用<code>CloudFlare</code>搭建免费的图床服务</p><p><a href="https://github.com/ifyour/cf-image-hosting">cf-image-hosting</a></p></blockquote><h4 id="部署Pages"><a href="#部署Pages" class="headerlink" title="部署Pages"></a>部署Pages</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/ifyour/cf-image-hosting.git</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> cf-image-hosting</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install &amp;&amp; npm run deploy</span><br></code></pre></td></tr></table></figure><p>部署成功后会显示如下信息</p><p><img src="https://image.itweeks.xyz/file/3c02d3849153debbfffd4.png" alt="部署预览"></p><h4 id="设置自定义域名"><a href="#设置自定义域名" class="headerlink" title="设置自定义域名"></a>设置自定义域名</h4><p>点击左侧<code>Workers和Pages</code> ，选择<code>cf-image-hosting</code></p><p><img src="https://image.itweeks.xyz/file/129cc7ec09ffc9becc44a.png" alt="设置自定义域名"></p><p>设置自定义域成功后则能在部署概览看到自定义的域名</p><p><img src="https://image.itweeks.xyz/file/032c93b767f0891db99b7.png" alt="域名列表"></p><p>点击自定义域名后则能跳转到具体的上传图片页面</p><p><img src="https://image.itweeks.xyz/file/3b957e3b3e859164997ea.png" alt="上传图片页面"></p><p>至此，免费的图床服务搭建成功。</p><h3 id="Typora自定义脚本上传图片"><a href="#Typora自定义脚本上传图片" class="headerlink" title="Typora自定义脚本上传图片"></a>Typora自定义脚本上传图片</h3><blockquote><p>目前只在mac上做了验证。</p></blockquote><h4 id="官方文档说明"><a href="#官方文档说明" class="headerlink" title="官方文档说明"></a>官方文档说明</h4><blockquote><p>官方文档对自定义脚本有如下说明:</p><p><a href="https://support.typora.io/Upload-Image/#use-current-filename--filepath-in-custom-commands">Typora自定义脚本</a></p></blockquote><p>You could config a custom command to upload images, using tools that is not listed in above options, or even write your own tools &#x2F; scripts. Typora will append all images that needs to be uploaded after the custom command you filled.</p><blockquote><p>您可以使用上述选项中未列出的工具，甚至编写自己的工具&#x2F;脚本，配置自定义命令来上传图片。Typora 会在你填写的自定义命令后追加所有需要上传的图片。</p></blockquote><p>Then, Typora will fetch image urls from the last N lines of the standard output of your custom command. (N is the number of images to upload).</p><blockquote><p>然后，Typora 会从自定义命令标准输出的最后 N 行中获取图片网址。(N 是要上传的图片数量）。</p></blockquote><p>For example, if you write a tool <code>upload-image.sh</code>, then you can input <code>[some path]/upload-image.sh</code> in the command filed. Typora will call <code>[some path]/upload-image.sh &quot;image-path-1&quot; &quot;image-path-2&quot;</code> to upload two images located in <code>image-path-1</code> and <code>image-path-2</code>. Then the command may return something like:</p><blockquote><p>例如，如果你编写了一个工具 <code>upload-image.sh</code> ，那么你可以在命令文件中输入 <code>[some path]/upload-image.sh</code> 。Typora 将调用 <code>[some path]/upload-image.sh &quot;image-path-1&quot; &quot;image-path-2&quot;</code> 来上传位于 <code>image-path-1</code> 和 <code>image-path-2</code> 中的两张图片。然后，命令可能会返回如下内容</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts">Upload Success:<br><span class="hljs-symbol">http:</span><span class="hljs-comment">//remote-image-1.png</span><br><span class="hljs-symbol">http:</span><span class="hljs-comment">//remote-image-2.png</span><br></code></pre></td></tr></table></figure><p>Then Typora will get the two remote image url from the output, and replace the original local images used in the Markdown document.</p><blockquote><p>然后，Typora 将从输出中获取两个远程图片 url，并替换 Markdown 文档中使用的原始本地图片。</p></blockquote><p>You could click the “Test Uploader” button to verify your custom commands.</p><blockquote><p>您可以点击 “测试上传程序 “按钮来验证您的自定义命令。</p></blockquote><h4 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h4><ol><li><p><strong>赋予脚本执行权限</strong>：保存脚本后，需要给脚本赋予执行权限。在终端运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x upload_image.sh<br></code></pre></td></tr></table></figure></li><li><p><strong>运行脚本</strong>：在终端中运行脚本，并传递多个图片路径作为参数。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./upload_image.sh path/to/your/image1.jpg path/to/your/image2.jpg<br></code></pre></td></tr></table></figure></li></ol><h5 id="脚本说明："><a href="#脚本说明：" class="headerlink" title="脚本说明："></a>脚本说明：</h5><ol><li><strong>参数检查</strong>：检查是否传递了至少一个图片路径参数。如果没有传递参数，则打印用法信息并退出。</li><li><strong>迭代处理每个图片文件</strong>：对每个传递的图片路径参数进行迭代处理。</li><li><strong>文件检查</strong>：检查每个图片文件是否存在。如果文件不存在，则打印错误信息并继续处理下一个文件。</li><li><strong>上传图片</strong>：使用<code>curl</code>命令将每个图片文件作为<code>file</code>参数上传到指定的API，并将响应存储在<code>RESPONSE</code>变量中。</li><li><strong>解析响应</strong>：使用<code>jq</code>命令解析JSON响应并提取所有<code>src</code>参数的内容。如果<code>jq</code>解析失败，则打印错误信息并继续处理下一个文件。</li><li><strong>打印结果</strong>：逐个打印成功上传后的每个<code>src</code>参数内容，即每张图片的URL。</li></ol><p>这个脚本会处理每个传递的图片文件，上传后解析并打印每个图片的URL。对于每个图片，如果上传失败或解析失败，会打印相应的错误信息，并继续处理下一个图片文件。</p><h5 id="脚本内容："><a href="#脚本内容：" class="headerlink" title="脚本内容："></a>脚本内容：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">自定义URL部分</span><br>base_url=&quot;https://img.itweeks.xyz&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查是否安装了jq</span><br>if ! command -v jq &amp;&gt;/dev/null; then<br>    echo &quot;Error: jq is not installed. Please install jq before running this script. &quot;<br>    echo &quot;You can install jq using the following command:&quot;<br>    echo &quot;brew install jq [macOS]&quot;<br>    exit 1<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">用于存储图片URL的数组</span><br>image_urls=()<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">循环读取参数</span><br>for file_path in &quot;$@&quot;; do<br>    # 发送上传图片请求，关闭curl输出<br>    response=$(curl --location --request POST &quot;$&#123;base_url&#125;/upload&quot; \<br>        --header &#x27;User-Agent: Apifox/1.0.0 (https://apifox.com)&#x27; \<br>        --form &quot;file=@\&quot;$&#123;file_path&#125;\&quot;&quot; \<br>        --silent) # 添加 --silent 选项以关闭输出<br><br>    # 检查请求是否成功<br>    if [ $? -eq 0 ]; then<br>        # 解析返回的JSON并拼接图片URL<br>        img_url=&quot;$&#123;base_url&#125;$(echo &quot;$response&quot; | jq -r &#x27;.[0].src&#x27;)&quot;<br><br>        # 存储图片URL到数组<br>        image_urls+=(&quot;$&#123;img_url&#125;&quot;)<br>    else<br>        # 请求失败，输出错误信息并退出脚本<br>        echo &quot;Upload Failed&quot;<br>        exit 1<br>    fi<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">所有请求成功后输出成功信息</span><br>echo &quot;Upload Success&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出所有图片URL</span><br>for url in &quot;$&#123;image_urls[@]&#125;&quot;; do<br>    echo &quot;$&#123;url&#125;&quot;<br>done<br></code></pre></td></tr></table></figure><h5 id="调用示例"><a href="#调用示例" class="headerlink" title="调用示例:"></a>调用示例:</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">~/soft /Users/mulyzhou/soft/upload-image.sh &quot;/Applications/Typora.app/Contents/Resources/TypeMark/assets/icon/icon_512x512.png&quot; &quot;/Applications/Typora.app/Contents/Resources/TypeMark/assets/icon/icon_256x256.png&quot;<br>https://image.itweeks.xyz/file/213fb10821a7758807733.png<br>https://image.itweeks.xyz/file/78332611766cef414f192.png<br></code></pre></td></tr></table></figure><blockquote><p><a href="https://image.itweeks.xyz/file/213fb10821a7758807733.png">https://image.itweeks.xyz/file/213fb10821a7758807733.png</a></p><p><a href="https://image.itweeks.xyz/file/78332611766cef414f192.png">https://image.itweeks.xyz/file/78332611766cef414f192.png</a></p><p>这两行输出即是上传成功后回显图片的地址，一定要这样直接输出，中间不能输出别的信息，不然typora无法解析</p></blockquote><h4 id="Typora配置脚本"><a href="#Typora配置脚本" class="headerlink" title="Typora配置脚本"></a>Typora配置脚本</h4><p>点击<code>设置</code> - <code>图像</code> - <code>上传服务</code>选择<code>自定义命令</code> - 命令选择脚本路径 如<code>/Users/mulyzhou/soft/upload-image.sh</code></p><p><img src="https://image.itweeks.xyz/file/0e630bc8a1f11bc1c9537.png" alt="Typora配置脚本"></p><p>点击验证图片上传选项</p><p><img src="https://image.itweeks.xyz/file/c80d5a498c9307cfe01f5.png" alt="验证成功示例"></p><p>显示验证成功后则代表配置成功。</p><h3 id="使用Telegraph-Image"><a href="#使用Telegraph-Image" class="headerlink" title="使用Telegraph-Image"></a>使用Telegraph-Image</h3><blockquote><p>使用上述方式部署后发现无法查看图片上传历史记录，这里采用另外一种部署方式。</p><p><a href="https://github.com/cf-pages/Telegraph-Image">Telegraph-Image</a></p></blockquote><h4 id="手把手教程"><a href="#手把手教程" class="headerlink" title="手把手教程"></a>手把手教程</h4><p>简单 3 步，即可部署本项目，拥有自己的图床</p><p>1.Fork 本仓库 (注意：必须使用 Git 或者 Wrangler 命令行工具部署后才能正常使用，<a href="https://developers.cloudflare.com/pages/functions/get-started/#deploy-your-function">文档</a>)</p><p>2.打开 Cloudflare Dashboard，进入 Pages 管理页面，选择创建项目，选择<code>连接到 Git 提供程序</code></p><p><img src="https://img.itweeks.xyz/file/2eac83479c385e3795811.png" alt="连接Git"></p><ol><li>按照页面提示输入项目名称，选择需要连接的 git 仓库，点击<code>部署站点</code>即可完成部署</li></ol><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>1.无限图片储存数量，你可以上传不限数量的图片</p><p>2.无需购买服务器，托管于 Cloudflare 的网络上，当使用量不超过 Cloudflare 的免费额度时，完全免费</p><p>3.无需购买域名，可以使用 Cloudflare Pages 提供的<code>*.pages.dev</code>的免费二级域名，同时也支持绑定自定义域名</p><p>4.支持图片审查 API，可根据需要开启，开启后不良图片将自动屏蔽，不再加载</p><p>5.支持后台图片管理，可以对上传的图片进行在线预览，添加白名单，黑名单等操作</p><h4 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h4><p>在 pages 的自定义域里面，绑定 cloudflare 中存在的域名，在 cloudflare 托管的域名，自动会修改 dns 记录 <img src="https://img.itweeks.xyz/file/54bca7c5508a7ab95f69b.png" alt="自定义域名"></p><h4 id="开启图片审查"><a href="#开启图片审查" class="headerlink" title="开启图片审查"></a>开启图片审查</h4><p>1.请前往<a href="https://moderatecontent.com/">https://moderatecontent.com/</a> 注册并获得一个免费的用于审查图像内容的 API key</p><p>2.打开 Cloudflare Pages 的管理页面，依次点击<code>设置</code>，<code>环境变量</code>，<code>添加环境变量</code></p><p>3.添加一个<code>变量名称</code>为<code>ModerateContentApiKey</code>，<code>值</code>为你刚刚第一步获得的<code>API key</code>，点击<code>保存</code>即可</p><p>注意：由于所做的更改将在下次部署时生效，你或许还需要进入<code>部署</code>页面，重新部署一下该本项目</p><p>开启图片审查后，因为审查需要时间，首次的图片加载将会变得缓慢，之后的图片加载由于存在缓存，并不会受到影响 <img src="https://img.itweeks.xyz/file/b1a3aae08261fc53f2ce9.png" alt="图片审查环境变量设置"></p><h4 id="设置图片管理功能"><a href="#设置图片管理功能" class="headerlink" title="设置图片管理功能"></a>设置图片管理功能</h4><p>1、支持图片管理功能，默认是关闭的，如需开启请部署完成后前往后台依次点击<code>设置</code>-&gt;<code>函数</code>-&gt;<code>KV 命名空间绑定</code>-&gt;<code>编辑绑定</code>-&gt;<code>变量名称</code>填写：<code>img_url</code> <code>KV 命名空间</code> 选择你提前创建好的 KV 储存空间，开启后访问 http(s):&#x2F;&#x2F;你的域名&#x2F;admin 即可打开后台管理页面</p><table><thead><tr><th>变量名称</th><th>KV 命名空间</th></tr></thead><tbody><tr><td>img_url</td><td>选择提前创建好的 KV 储存空间</td></tr></tbody></table><p><a href="https://camo.githubusercontent.com/fc772e54ae519d846f80baa9cb6894866815984e9b28ac170eb5cf12c7716274/68747470733a2f2f696d2e6775726c2e65752e6f72672f66696c652f6130633231326435646662363166333635326430372e706e67"><img src="https://img.itweeks.xyz/file/98cb02900f090930780f0.png" alt="img"></a> <a href="https://camo.githubusercontent.com/2ccb03fba40676ce418b0574365749928a5878ab6d529f065cde9fbc17064e42/68747470733a2f2f696d2e6775726c2e65752e6f72672f66696c652f3438623933313665643031386232636236376366342e706e67"><img src="https://img.itweeks.xyz/file/5b855c9143bdc51068441.png" alt="img"></a></p><p>2、后台管理页面新增登录验证功能，默认也是关闭的，如需开启请部署完成后前往后台依次点击<code>设置</code>-&gt;<code>环境变量</code>-&gt;<code>为生产环境定义变量</code>-&gt;<code>编辑变量</code> 添加如下表格所示的变量即可开启登录验证</p><table><thead><tr><th>变量名称</th><th>值</th></tr></thead><tbody><tr><td>BASIC_USER &#x3D;</td><td>&lt;后台管理页面登录用户名称&gt;</td></tr><tr><td>BASIC_PASS &#x3D;</td><td>&lt;后台管理页面登录用户密码&gt;</td></tr></tbody></table><p><img src="https://img.itweeks.xyz/file/810db36cd05b3d768213a.png" alt="后台管理账号环境变量设置"></p><blockquote><p>当然你也可以不设置这两个值，这样访问后台管理页面时将无需验证，直接跳过登录步骤，这一设计使得你可以结合 Cloudflare Access 进行使用，实现支持邮件验证码登录，Microsoft 账户登录，Github 账户登录等功能，能够与你域名上原有的登录方式所集成，无需再次记忆多一组后台的账号密码，添加 Cloudflare Access 的方式请参考官方文档，注意需要保护路径包括&#x2F;admin 以及 &#x2F;api&#x2F;manage&#x2F;*</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>术说</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>Mac</tag>
      
      <tag>Typora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>chmod命令详解</title>
    <link href="/2024/05/20/chmod%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <url>/2024/05/20/chmod%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<blockquote><p><code>chmod</code> 是 Unix 和 Linux 系统中用于更改文件或目录权限的命令。权限控制确保只有适当的用户可以读取、写入或执行文件。为了有效地使用 <code>chmod</code>，需要理解文件权限的表示方法。</p></blockquote><h2 id="权限表示方法"><a href="#权限表示方法" class="headerlink" title="权限表示方法"></a>权限表示方法</h2><p>文件权限由三组组成：用户（user），组（group），和其他（others）。每组有三种权限：</p><ul><li>读 (read, <code>r</code>)</li><li>写 (write, <code>w</code>)</li><li>执行 (execute, <code>x</code>)</li></ul><p>这三种权限分别用一个字符表示，如果没有权限则用 <code>-</code> 表示。例如：</p><ul><li><code>rwx</code>：读、写、执行权限都有。</li><li><code>rw-</code>：读、写权限有，但没有执行权限。</li></ul><p>每个文件或目录的权限可以用以下格式表示：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">-rwxr-xr<span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><p>第一位表示文件类型（<code>-</code> 表示普通文件，<code>d</code> 表示目录等），接下来的九位表示权限，分成三组三组。</p><h2 id="使用-chmod-的两种方法：符号法和八进制法"><a href="#使用-chmod-的两种方法：符号法和八进制法" class="headerlink" title="使用 chmod 的两种方法：符号法和八进制法"></a>使用 <code>chmod</code> 的两种方法：符号法和八进制法</h2><h3 id="符号法"><a href="#符号法" class="headerlink" title="符号法"></a>符号法</h3><p>符号法使用字符来表示权限的添加或移除。格式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">chmod <span class="hljs-selector-attr">[ugoa]</span><span class="hljs-selector-attr">[+-=]</span><span class="hljs-selector-attr">[rwx]</span> 文件名<br></code></pre></td></tr></table></figure><ul><li><code>u</code>：用户</li><li><code>g</code>：组</li><li><code>o</code>：其他</li><li><code>a</code>：所有（用户、组和其他）</li></ul><p>符号：</p><ul><li><code>+</code>：添加权限</li><li><code>-</code>：移除权限</li><li><code>=</code>：设置权限（覆盖当前权限）</li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> u+x 文件名  <span class="hljs-comment"># 给用户添加执行权限</span><br><span class="hljs-built_in">chmod</span> g-w 文件名  <span class="hljs-comment"># 移除组的写权限</span><br><span class="hljs-built_in">chmod</span> o=r 文件名  <span class="hljs-comment"># 设置其他用户只有读权限</span><br><span class="hljs-built_in">chmod</span> a+r 文件名  <span class="hljs-comment"># 所有人添加读权限</span><br></code></pre></td></tr></table></figure><p>在使用 <code>chmod</code> 命令时，省略用户类型<code>u</code>（用户）、<code>g</code>（组）或 <code>o</code>（其他）会默认应用到所有用户类型，即用户、组和其他所有人。因此，命令 <code>chmod +x example.txt</code> 是一种简写形式，等同于 <code>chmod a+x example.txt</code>，其中 a 代表所有人（all）</p><h3 id="八进制法"><a href="#八进制法" class="headerlink" title="八进制法"></a>八进制法</h3><p>八进制法使用一个三位的数字来表示权限，每位数字是一个八进制数，分别表示用户、组和其他的权限。每种权限用以下数字表示：</p><ul><li>读 (r) &#x3D; 4</li><li>写 (w) &#x3D; 2</li><li>执行 (x) &#x3D; 1</li></ul><p>这些数字可以累加，例如：</p><ul><li><code>7</code> 表示读、写和执行权限 (<code>4 + 2 + 1</code>)</li><li><code>6</code> 表示读和写权限 (<code>4 + 2</code>)</li><li><code>5</code> 表示读和执行权限 (<code>4 + 1</code>)</li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 755 文件名  <span class="hljs-comment"># 用户有读、写、执行权限，组和其他有读、执行权限</span><br><span class="hljs-built_in">chmod</span> 644 文件名  <span class="hljs-comment"># 用户有读、写权限，组和其他只有读权限</span><br><span class="hljs-built_in">chmod</span> 700 文件名  <span class="hljs-comment"># 只有用户有读、写、执行权限</span><br></code></pre></td></tr></table></figure><h2 id="示例解释"><a href="#示例解释" class="headerlink" title="示例解释"></a>示例解释</h2><p>假设有一个文件 <code>example.txt</code>，当前权限如下：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-literal">-</span><span class="hljs-comment">rw</span><span class="hljs-literal">-</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><br></code></pre></td></tr></table></figure><p>意味着：</p><ul><li>用户有读和写权限</li><li>组有读权限</li><li>其他人有读权限</li></ul><p>我们可以使用 <code>chmod</code> 修改权限：</p><h3 id="添加执行权限给用户"><a href="#添加执行权限给用户" class="headerlink" title="添加执行权限给用户"></a>添加执行权限给用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> u+x example.txt<br></code></pre></td></tr></table></figure><p>修改后权限为：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-literal">-</span><span class="hljs-comment">rwxr</span><span class="hljs-literal">--</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><br></code></pre></td></tr></table></figure><h3 id="移除组的读权限"><a href="#移除组的读权限" class="headerlink" title="移除组的读权限"></a>移除组的读权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> g-r example.txt<br></code></pre></td></tr></table></figure><p>修改后权限为：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-literal">-</span><span class="hljs-comment">rwx</span><span class="hljs-literal">----</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><br></code></pre></td></tr></table></figure><h3 id="设置文件权限为-755（用户：读、写、执行；组：读、执行；其他：读、执行）"><a href="#设置文件权限为-755（用户：读、写、执行；组：读、执行；其他：读、执行）" class="headerlink" title="设置文件权限为 755（用户：读、写、执行；组：读、执行；其他：读、执行）"></a>设置文件权限为 <code>755</code>（用户：读、写、执行；组：读、执行；其他：读、执行）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 755 example.txt<br></code></pre></td></tr></table></figure><p>修改后权限为：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-rwxr-xr-x</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>使用 <code>chmod</code> 可以通过符号法和八进制法来修改文件或目录的权限。</li><li>符号法适合进行增量式权限修改，而八进制法适合一次性设置权限。</li><li>理解权限的表示方法对于管理文件系统中的权限至关重要。</li></ul>]]></content>
    
    
    <categories>
      
      <category>术说</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac系统Obsidian和Typora更换霞鹜文楷字体</title>
    <link href="/2024/05/10/Mac%E7%B3%BB%E7%BB%9FObsidian%E5%92%8CTypora%E6%9B%B4%E6%8D%A2%E9%9C%9E%E9%B9%9C%E6%96%87%E6%A5%B7%E5%AD%97%E4%BD%93/"/>
    <url>/2024/05/10/Mac%E7%B3%BB%E7%BB%9FObsidian%E5%92%8CTypora%E6%9B%B4%E6%8D%A2%E9%9C%9E%E9%B9%9C%E6%96%87%E6%A5%B7%E5%AD%97%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在github上发现了一款非常好看的字体<a href="https://github.com/lxgw/LxgwWenKai">LXGW WenKai &#x2F; 霞鹜文楷</a>，这里记录下Mac电脑如何安装这个字体，以及我用到的笔记软件更换字体的过程。</p></blockquote><h3 id="Mac安装字体"><a href="#Mac安装字体" class="headerlink" title="Mac安装字体"></a>Mac安装字体</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">增加代理,不加代理下载速度会很慢,这里的端口看你本地的代理软件</span><br>export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装相关字体</span><br>brew tap homebrew/cask-fonts &amp;&amp; brew install font-lxgw-wenkai<br></code></pre></td></tr></table></figure><h3 id="Mac查看字体目录"><a href="#Mac查看字体目录" class="headerlink" title="Mac查看字体目录"></a>Mac查看字体目录</h3><p>MAC<a href="https://www.zhihu.com/question/21686333">电脑查询字体</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls ~/Library/Fonts/<br><br>ls /Library/Fonts/<br><br>ls /System/Library/Fonts/<br></code></pre></td></tr></table></figure><p>一般自己安装的字体用<code>ls ~/Library/Fonts/</code>即可</p><p><img src="https://image.itweek.top/pic/202405101108569.png" alt="自定义字体目录"></p><h3 id="修改Obsidian字体"><a href="#修改Obsidian字体" class="headerlink" title="修改Obsidian字体"></a>修改Obsidian字体</h3><p>打开左下角<code>Setting</code>设置</p><p><img src="https://image.itweek.top/pic/202405101116244.png" alt="Obsidian设置字体"></p><p>搜索 <code>LXGW</code>，选择<code>LXGW WenKai Mono</code>点击添加、保存</p><p>效果如下：</p><p><img src="https://image.itweek.top/pic/202405101126770.png" alt="Obsidian效果图"></p><h3 id="修改Typora字体"><a href="#修改Typora字体" class="headerlink" title="修改Typora字体"></a>修改Typora字体</h3><p><a href="https://blog.csdn.net/code_peak/article/details/127193047">修改Typora编辑器的字体_typora字体设置-CSDN博客</a></p><p>打开Typora偏好设置</p><p><img src="https://image.itweek.top/pic/202405101058979.png" alt="打开主题文件夹"></p><p><img src="https://image.itweek.top/pic/202405101059136.png" alt="主题文件夹"></p><p>我用的是vue主题，这里修改<code>vue.css</code>&#x2F;<code>vue-dark.css</code>两个文件</p><p>在最前面添加 <code>&#39;LXGW WenKai Mono&#39;</code></p><p><img src="https://image.itweek.top/pic/202405101101042.png" alt="vue主题css代码"></p><p>最终效果如下：<br><img src="https://image.itweek.top/pic/202405101150490.png" alt="Typora效果图"></p>]]></content>
    
    
    <categories>
      
      <category>术说</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>Mac</tag>
      
      <tag>Obsidian</tag>
      
      <tag>Typora</tag>
      
      <tag>霞鹜文楷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA利用阿里云插件部署SpringBoot项目</title>
    <link href="/2024/05/09/IDEA%E5%88%A9%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E6%8F%92%E4%BB%B6%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/"/>
    <url>/2024/05/09/IDEA%E5%88%A9%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E6%8F%92%E4%BB%B6%E9%83%A8%E7%BD%B2Springboot%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h3><p>搜索 <code>Alibaba Cloud Toolkit</code> 插件，并安装。</p><p><img src="https://image.itweek.top/mweb/2024-05-09-17152334408916-17152333392665.jpg" alt="阿里云插件"></p><h3 id="IDEA增加Run-Debug-Configurations"><a href="#IDEA增加Run-Debug-Configurations" class="headerlink" title="IDEA增加Run&#x2F;Debug Configurations"></a>IDEA增加Run&#x2F;Debug Configurations</h3><p><code>Add New Configuration</code> - <code>Deploy to Host</code></p><p>增加<code>Target Host</code> - <code>Add Host</code> </p><p><img src="https://image.itweek.top/mweb/2024-05-09-17152334408937-17152272472399.jpg" alt="Add Host"></p><p>填写主机列表ip、端口、用户名、密码，测试连接状况</p><p><img src="https://image.itweek.top/mweb/2024-05-09-17152334408949-17152326538764.jpg" alt="添加主机"></p><p>选择刚才添加的主机ip，</p><p>填写<code>Target Directory</code></p><blockquote><p>这个目录是jar包部署到服务器的目录，例如 ：<code>/home/aics/aics</code></p></blockquote><p>填写<code>After deploy</code></p><blockquote><p>这里在<code>/home/aics/aics</code>下放上执行脚本<code>restart.sh</code>，脚本文件内容放在最后<br>所以这里写的命令可以写 <code>./restart.sh restart</code><br>注意执行脚本需要有执行权限 <code>chmod a+x restart.sh</code></p></blockquote><p><img src="https://image.itweek.top/mweb/2024-05-09-17152334408960-17152329320000.jpg" alt="Command"></p><p>最终配置如下：</p><p><img src="https://image.itweek.top/mweb/2024-05-09-17152334408967-17152271146207.jpg" alt="部署配置"></p><p>这里也可以填写<code>Advanced</code>配置，作用是用来查看jar包启动的日志</p><p><img src="https://image.itweek.top/mweb/2024-05-09-17152334408977-17152331306351.jpg" alt="Advanced配置"></p><h3 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h3><blockquote><p>修改<code>APP_NAME</code>、<code>PROJECT_PATH</code>配置</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#这里可替换为你自己的执行程序，其他代码无需更改</span><br>APP_NAME=aics-api.jar<br><span class="hljs-comment"># jar包地址</span><br>PROJECT_PATH=/home/aics/aics-api<br><span class="hljs-comment"># 日志输出地址</span><br><span class="hljs-comment"># LOG_PATH=/root/soft/push-weather/nohup.out</span><br><br><span class="hljs-comment">#使用说明，用来提示输入参数</span><br><span class="hljs-function"><span class="hljs-title">usage</span></span>() &#123;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Usage: sh 脚本名.sh [start|stop|restart|status]&quot;</span><br><span class="hljs-built_in">exit</span> 1<br>&#125;<br><br><span class="hljs-comment">#检查程序是否在运行</span><br><span class="hljs-function"><span class="hljs-title">is_exist</span></span>()&#123;<br>pid=`ps -ef|grep <span class="hljs-variable">$APP_NAME</span>|grep -v grep|awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> `<br><span class="hljs-comment">#如果不存在返回1，存在返回0</span><br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;pid&#125;</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">return</span> 1<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">return</span> 0<br><span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment">#启动方法</span><br><span class="hljs-function"><span class="hljs-title">start</span></span>()&#123;<br>is_exist<br><span class="hljs-keyword">if</span> [ $? -eq <span class="hljs-string">&quot;0&quot;</span> ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;APP_NAME&#125;</span> is already running. pid=<span class="hljs-variable">$&#123;pid&#125;</span> .&quot;</span><br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">nohup</span> java -jar <span class="hljs-variable">$PROJECT_PATH</span>/<span class="hljs-variable">$APP_NAME</span> 2&gt;&amp;1 &amp;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;APP_NAME&#125;</span> start success&quot;</span><br><span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment">#停止方法</span><br><span class="hljs-function"><span class="hljs-title">stop</span></span>()&#123;<br>is_exist<br><span class="hljs-keyword">if</span> [ $? -eq <span class="hljs-string">&quot;0&quot;</span> ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">kill</span> -9 <span class="hljs-variable">$pid</span><br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;APP_NAME&#125;</span> is not running&quot;</span><br><span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment">#输出运行状态</span><br><span class="hljs-function"><span class="hljs-title">status</span></span>()&#123;<br>is_exist<br><span class="hljs-keyword">if</span> [ $? -eq <span class="hljs-string">&quot;0&quot;</span> ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;APP_NAME&#125;</span> is running. Pid is <span class="hljs-variable">$&#123;pid&#125;</span>&quot;</span><br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;APP_NAME&#125;</span> is NOT running.&quot;</span><br><span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment">#重启</span><br><span class="hljs-function"><span class="hljs-title">restart</span></span>()&#123;<br>stop<br>start<br>&#125;<br><br><br><span class="hljs-comment">#根据输入参数，选择执行对应方法，不输入则执行使用说明</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> <span class="hljs-keyword">in</span><br><span class="hljs-string">&quot;start&quot;</span>)<br>start<br>;;<br><span class="hljs-string">&quot;stop&quot;</span>)<br>stop<br>;;<br><span class="hljs-string">&quot;status&quot;</span>)<br>status<br>;;<br><span class="hljs-string">&quot;restart&quot;</span>)<br>restart<br>;;<br>*)<br>usage<br>;;<br><br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>术说</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot整合WebSocket作为服务端遇到的坑</title>
    <link href="/2024/04/15/Springboot%E6%95%B4%E5%90%88WebSocket%E4%BD%9C%E4%B8%BA%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <url>/2024/04/15/Springboot%E6%95%B4%E5%90%88WebSocket%E4%BD%9C%E4%B8%BA%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近遇到一个需求，对接某公有云上的坐席系统，需要接收人工坐席和客户对话的语音流，然后调用<code>ASR</code>（Automatic Speech Recognition，自动语音识别）引擎，对语音流实时转写，最后将实时转写的内容推送到kafka，供下游系统消费。</p></blockquote><p>大致流程图如下:</p><p><img src="https://image.itweek.top/mweb/2024-04-18-17134113976229-%E8%AF%AD%E9%9F%B3%E6%B5%81%E5%AF%B9%E6%8E%A5.jpeg" alt="语音流对接"></p><p>标绿的系统即是我方需求对接系统。</p><blockquote><p>问题: 上述前面流程都没问题，但是发现最终的转写内容总是会丢最后的一两句话。对接系统也没有错误日志。</p></blockquote><p>联系坐席客服系统研发人员协助排查问题，刚开始对方的研发人员也没发现问题，对方系统也没有错误日志(是压根就没打印日志，这个是最坑的)。最后排查很久依然无法找到问题，就只能对方的测试系统和我本地的系统直接联调。对方的系统开启日志后发现有一个报错，报错如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs log">2024-04-02 15:23:46.144  INFO 1 --- [tReadThread-152] c.t.c.a.rasr.client.RasrClientWebSocket  [] [] [] [] [] : rasr-web-socket onClose. message=No async message support and buffer too small. Buffer size: [8,192], Message size: [76,992]... <br></code></pre></td></tr></table></figure><p>该日志就很明显了，我方系统的Websocket服务端默认接收的字节流长度为<code>8192</code>，但是发送的字节流达到了<code>76992</code>，所以最后的音频流接收不到，导致最后几句话的内容丢失。</p><p><strong>为什么只会丢失最后几句话？</strong></p><p>原因：坐席客服系统重复发语音流的过程中语音流的长度为<code>4096</code>，未超过<code>WebSocket</code>服务端默认接收的字节流长度，所以中间过程没问题。但是最后通话结束后，坐席客服系统会把剩余所有的字节流全部发送过来，字节流的长度超过了<code>8096</code>，服务端不会接收该字节流导致最后的语音流丢失，且服务端没有相关错误日志。</p><p><strong>怎么解决?</strong></p><p><a href="https://stackoverflow.com/questions/21730566/how-to-increase-output-buffer-for-spring-sockjs-websocket-server-implementation">如何增加spring-sockjs-websocket服务器实现的输出缓冲区</a></p><p>因为是用<code>Springboot</code>整合<code>Websocket</code>，只需增加如下配置即可调整输出缓冲区:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.server.standard.ServerEndpointExporter;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 开启WebSocket支持</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServerEndpointExporter <span class="hljs-title function_">serverEndpointExporter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerEndpointExporter</span>();<br>    &#125;<br><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServletServerContainerFactoryBean <span class="hljs-title function_">createServletServerContainerFactoryBean</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ServletServerContainerFactoryBean</span> <span class="hljs-variable">container</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletServerContainerFactoryBean</span>();<br>        container.setMaxTextMessageBufferSize(<span class="hljs-number">102400</span>);<br>        container.setMaxBinaryMessageBufferSize(<span class="hljs-number">102400</span>);<br>        log.info(<span class="hljs-string">&quot;Websocket factory returned&quot;</span>);<br>        <span class="hljs-keyword">return</span> container;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考链接:</p><p><a href="https://stackoverflow.com/questions/21730566/how-to-increase-output-buffer-for-spring-sockjs-websocket-server-implementation">How to increase output buffer for spring sockjs websocket server implementation - Stack Overflow</a>、<br><a href="https://www.scaugreen.cn/posts/38508/">在spring-boot利用websocket上传文件发现的问题 | 生子当如哈士奇的小空间</a></p>]]></content>
    
    
    <categories>
      
      <category>术说</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>WebSocket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenWrt作为旁路由配置Wireguard实现内网穿透</title>
    <link href="/2024/03/27/OpenWrt%E4%BD%9C%E4%B8%BA%E6%97%81%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AEWireguard%20%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <url>/2024/03/27/OpenWrt%E4%BD%9C%E4%B8%BA%E6%97%81%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AEWireguard%20%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h3><p>因为最近一直在折腾软路由相关的系统及配置，也在家里整了一套k8s的环境，有一定需求需要在外面去连这套k8s的环境作为开发环境的补充，虽然可以通过外网端口暴露的方式访问，但是还是觉得不太方便和安全，因此需要将办公环境的电脑直接通过内网的ip访问内网的环境。<br>因为办公环境使用的是<code>H3C</code>的<code>iNode</code>上网，尝试使用<code>OpenVpn</code>发现连接后<code>iNode</code>会掉线，在官方的论坛上搜索后得知是有冲突，<a href="https://zhiliao.h3c.com/questions/dispcont/113749">iNode 跟其他VPN冲突</a>，如果都是用ssl的vpn软件话会存在冲突只能用一个。这时需要换一种vpn的协议，这时选择了采用udp协议的<code>WireGuard</code>。<br>本文不对<code>OpenWrt</code>的安装及作为旁路由的配置做介绍，只针对旁路由下的<code>OpenVpn</code>如何安装<code>WireGuard</code>实现内网穿透，我使用的是<code>esir</code>的高大全的版本，预装了<code>WireGuard</code>,下载链接如下:</p><blockquote><p><a href="https://drive.google.com/file/d/1zciCXS2B6_ASFJFHMgTiO7PExupXN7yZ/view?usp=drive_link">esir高大全openwrt</a><br><a href="https://drive.google.com/drive/folders/1PsS3c0P7a4A4KY8plQg4Fla8ZI-PGBb1">esir高大全openwrt列表</a></p></blockquote><h3 id="1-OpenVpn和WireGuard区别"><a href="#1-OpenVpn和WireGuard区别" class="headerlink" title="1. OpenVpn和WireGuard区别"></a>1. OpenVpn和WireGuard区别</h3><ul><li><code>OpenConnect VPN</code>主要是使用<code>TCP</code>协议,而<code>WireGuard</code>则是<code>UDP</code>协议,最明显使用感知就是前者需要类似拨号一样过程,在网络断开,重连等情况下并非无感.而<code>WireGuard</code>则类似于常驻后台,随用随取的感觉,体验不错.</li><li>在配置方面, <code>OpenConnect VPN</code> 需要使用证书来提高使用安全和连接体验,而 <code>WireGuard </code>则是使用点对点的加密公钥私钥的形式来配对,并且每台客户端需要单独分配 IP 和公私钥.前期配置均稍许麻烦,但两者后续使用和管理都还比较合理和方便.</li><li><code>OpenConnect VPN</code> 只需要客户端拥有证书文件即可(或者设置对应的账户密码),<code>WireGuard</code> 只需要客户拥有配置文件即可</li></ul><h3 id="2-网络环境介绍"><a href="#2-网络环境介绍" class="headerlink" title="2. 网络环境介绍"></a>2. 网络环境介绍</h3><p><img src="https://image.itweek.top/mweb/2024-03-28-17116092579499-17116050648205.jpg" alt="家庭网络拓扑图"></p><ul><li><code>192.168.50.1</code> <code>ikuai</code> 主路由</li><li><code>192.168.50.2</code> <code>openwrt</code> 旁路由,并作为DNS,与<strong>主路由网关互指</strong></li></ul><h3 id="3-服务端设置"><a href="#3-服务端设置" class="headerlink" title="3. 服务端设置"></a>3. 服务端设置</h3><h4 id="3-1-创建公钥私钥"><a href="#3-1-创建公钥私钥" class="headerlink" title="3.1 创建公钥私钥"></a>3.1 创建公钥私钥</h4><ul><li>预共享密钥</li></ul><p>通过<code>SSH</code>登陆到 <code>OpenWRT</code> 后台.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建目录存放公钥私钥</span><br>mkdir wg<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入文件夹</span><br>cd wg<br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置创建密钥的权限</span><br>umask 077<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建预共享密钥</span><br>wg genpsk &gt; sharekey<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取密钥复制保存</span><br>cat sharekey<br></code></pre></td></tr></table></figure><p>这里需要保存<code>sharekey</code>,后面配置要用到。</p><ul><li>服务端公钥私钥</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建服务端公钥和私钥</span><br>wg genkey | tee server_privatekey | wg pubkey &gt; server_publickey<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取服务端私钥复制保存</span><br>cat server_privatekey<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取服务端公钥复制保存</span><br>cat server_publickey<br></code></pre></td></tr></table></figure><p>这里需要保存<code>server_privatekey</code>和<code>server_publickey</code>,后面配置要用到。</p><ul><li>客户端公钥私钥 ( macOS )</li></ul><p>这里有多少客户端就需要生产多少次，命名规则可以按照 <code>macos_publickey</code> 和<code>macos_privatekey</code> 命名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建 macOS 客户端公钥和私钥</span><br>wg genkey | tee macos_privatekey | wg pubkey &gt; macos_publickey<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取 macOS 客户端私钥复制保存</span><br>cat macos_privatekey<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取 macOS 客户端公钥复制保存</span><br>cat macos_publickey<br></code></pre></td></tr></table></figure><p>这里需要保存<code>macos_privatekey</code>和<code>macos_publickey</code>,后面配置要用到。</p><p>最终生成的目录文件结构如下：</p><p><img src="https://image.itweek.top/mweb/2024-03-28-17116092579526-17116055405021.jpg" alt="密钥生成目录文件结构"></p><h4 id="3-2-配置OpenWrt"><a href="#3-2-配置OpenWrt" class="headerlink" title="3.2 配置OpenWrt"></a>3.2 配置OpenWrt</h4><h5 id="3-2-1-添加WireGuard网络新接口"><a href="#3-2-1-添加WireGuard网络新接口" class="headerlink" title="3.2.1 添加WireGuard网络新接口"></a>3.2.1 添加WireGuard网络新接口</h5><p>登陆 <code>OpenWRT</code> - 网络 - 接口 - 添加新接口</p><p><img src="https://image.itweek.top/mweb/2024-03-28-17116092579547-17116057152453.jpg" alt="OpenWRT添加WireGuard接口"></p><p>填写接口名 - 选择接口协议 - 提交</p><p><img src="https://image.itweek.top/mweb/2024-03-28-17116092579567-17116057899888.jpg" alt="WireGuard网络创建新接口"></p><h5 id="3-2-2-WireGuard网络接口基本设置"><a href="#3-2-2-WireGuard网络接口基本设置" class="headerlink" title="3.2.2 WireGuard网络接口基本设置"></a>3.2.2 WireGuard网络接口基本设置</h5><p>基本设置 - 填写上文获取的服务端私钥:<code>server_privatekey</code><br>自行填写一个端口号 - 并且在路由器映射该端口的 UDP 协议<br>我这里使用的是<code>ikuai</code>作为主路由，协议为<code>udp</code>即可，设置如下：<br><img src="https://image.itweek.top/mweb/2024-03-28-17116092579580-17116059144269.jpg" alt="ikuai端口映射"></p><p>IP 地址填写一个 VPN 专用的网段 IP - 本文以<code>192.168.100.X</code>为 WireGuard 的专用网段为例,则本 WG 服务器 IP 为<code>192.168.100.1/24</code></p><p><img src="https://image.itweek.top/mweb/2024-03-28-17116092579600-17116060027059.jpg" alt="服务端基本设置"></p><p>点击右下角的<code>保存并应用</code></p><p>再次补充下：</p><ul><li>协议选择<code>WireGuard Vpn</code>协议</li><li>私钥填写上文获取的服务端私钥:<code>server_privatekey</code></li><li>监听端口填写<code>ikuai</code>端口映射的<code>16666</code></li><li>IP地址填写<code>192.168.100.1/24</code></li></ul><h5 id="3-2-3-wireguard网络接口防火墙设置"><a href="#3-2-3-wireguard网络接口防火墙设置" class="headerlink" title="3.2.3 wireguard网络接口防火墙设置"></a>3.2.3 wireguard网络接口防火墙设置</h5><p>防火墙设置 - 选择 <code>wireguard</code></p><p><img src="https://image.itweek.top/mweb/2024-03-28-17116092579619-17116068122021.jpg" alt="wireguard防火墙设置"></p><p>点击右下角的<code>保存并应用</code></p><h5 id="3-2-4-客户端-Peers设置"><a href="#3-2-4-客户端-Peers设置" class="headerlink" title="3.2.4 客户端 Peers设置"></a>3.2.4 客户端 Peers设置</h5><p>客户端 Peers 区域为每个客户端添加配置</p><ul><li>选择预共享密钥 - 添加</li><li>公钥 - 填写上文获取的macOS <code>客户端公钥macos_publickey</code></li><li>预共享密钥 - 填写上文获取的<code>预共享密钥sharekey</code></li><li>允许的 IP - 即表示为此 macOS 客户端分配固定 IP , 本文示例为 <code>192.168.100.2/32</code> , 注意各客户端 IP 不能冲突.这里的ip会在后面macOs配置文件里用到</li><li>持续 Keep-Alive - 填写 25<br><img src="https://image.itweek.top/mweb/2024-03-28-17116092579646-17116069292181.jpg" alt="客户端 Peers设置"></li></ul><p>点击右下角的<code>保存并应用</code></p><h5 id="3-2-5-OpenWrt防火墙设置"><a href="#3-2-5-OpenWrt防火墙设置" class="headerlink" title="3.2.5 OpenWrt防火墙设置"></a>3.2.5 OpenWrt防火墙设置</h5><p>网络 - 防火墙 - 自定义防火墙 - 添加以下防火墙 - 右下角重启防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">注意此条防火墙网段 192.168.100.0/24 需和上文服务端 IP 网段保持一致.</span><br>iptables -t nat -A POSTROUTING -s 192.168.100.0/24 -o br-lan -j MASQUERADE<br></code></pre></td></tr></table></figure><p><img src="https://image.itweek.top/mweb/2024-03-28-17116092579672-17116074443309.jpg" alt="OpenWrt防火墙设置"></p><h5 id="3-2-6-重启-WireGuard"><a href="#3-2-6-重启-WireGuard" class="headerlink" title="3.2.6 重启 WireGuard"></a>3.2.6 重启 WireGuard</h5><p>返回网络 - 接口 - 关闭 - 连接<br>或者直接重启整个 <code>OpenWRT</code> 最为稳妥.这里建议直接重启整个<code>OpenWRT</code></p><h3 id="4-客户端配置"><a href="#4-客户端配置" class="headerlink" title="4. 客户端配置"></a>4. 客户端配置</h3><p>创建客户端配置文件,创建后缀为.conf的配置文件,例如macos_wireguard.conf,复制以下信息,并且修改对应的公私钥信息:</p><p>需要修改如下配置</p><ul><li><strong>Address</strong> 192.168.100.2&#x2F;32 客户端ip</li><li><strong>PrivateKey</strong> 对应客户端私钥</li><li><strong>DNS</strong> 192.168.50.2 OpenWrt的地址，前提是主路由的DNS设置的OpenWrt地址</li><li><strong>PublicKey</strong> OpenWRT的公钥</li><li><strong>Endpoint</strong> 公网ip或域名+端口</li><li><strong>AllowedIPs</strong> 值得注意的是AllowedIPs参数.针对不同场景和需求,此处可以配置不用的路由.当此处为<code>0.0.0.0/0</code>时表示任意网络请求都经过 VPN 俗称全局 VPN , 由于 iPhone 同时只能有 1 个 VPN 软件在线,所以当 <code>WireGuard</code> 启动时,其他类似Quanx,小火箭等软件则无法使用,此时 iPhone 可以全局 VPN 使用家中的网络来访问一些外网，这时如果OpenVpn开启了外网访问，iPhone设置了<code>0.0.0.0/0</code>，不需要再启动QuanX等软件，一样可以访问外网.</li></ul><blockquote><p>此时的配置文件是用于客户端的,所以<code>PrivateKey</code>则为 macOS 客户端的私钥,而Peer中的<code>PublicKey</code>则为<code>OpenWRT</code>的公钥.请注意反向思考.<code>Endpoint</code>填写家中的 IP 或者 DDNS 域名和端口.</p></blockquote><h4 id="4-1-macos配置"><a href="#4-1-macos配置" class="headerlink" title="4.1 macos配置"></a>4.1 macos配置</h4><p>新建<code>macos_wireguard.conf</code><br>在 <code>macOS App Store </code>下载 WireGuard,从文件导入隧道.</p><blockquote><p>这里下载<code>WireGuard</code>需要<strong>美区账户</strong></p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Interface]</span><br><span class="hljs-comment"># 对应客户段分配的 IP</span><br><span class="hljs-attr">Address</span> = <span class="hljs-number">192.168</span>.<span class="hljs-number">100.2</span>/<span class="hljs-number">32</span><br><span class="hljs-comment"># 对应客户端私钥</span><br><span class="hljs-attr">PrivateKey</span> = macos_privatekey<br><span class="hljs-comment"># 本地的 DNS 服务器或者公有 DNS 服务器</span><br><span class="hljs-attr">DNS</span> = <span class="hljs-number">192.168</span>.<span class="hljs-number">50.2</span><br><span class="hljs-section">[Peer]</span><br><span class="hljs-comment">#  OpenWRT的公钥</span><br><span class="hljs-attr">PublicKey</span> = server_publickey<br><span class="hljs-comment"># macOS 如上设置可与 ClashX Pro 共存仅代理局域网,互联网走本地网络.</span><br><span class="hljs-comment"># iPhone iPad 设置为 0.0.0.0/0 全局则模式.</span><br><span class="hljs-attr">AllowedIPs</span> = <span class="hljs-number">192.168</span>.<span class="hljs-number">50.0</span>/<span class="hljs-number">24</span>, <span class="hljs-number">192.168</span>.<span class="hljs-number">100.0</span>/<span class="hljs-number">24</span><br><span class="hljs-comment"># 预共享密钥</span><br><span class="hljs-attr">PresharedKey</span> = sharekey<br><span class="hljs-comment"># wireGuard 端点</span><br><span class="hljs-attr">Endpoint</span> = 公网ip或域名:<span class="hljs-number">16666</span><br><span class="hljs-attr">PersistentKeepalive</span> = <span class="hljs-number">25</span><br></code></pre></td></tr></table></figure><blockquote><p>这里的AllowedIPs &#x3D; 192.168.50.0&#x2F;24, 192.168.100.0&#x2F;24，<code>192.168.50.0/24</code>为内网ip域，<code>192.168.100.0/24</code>为<code>wireguird</code>的ip域.</p></blockquote><p>连接后运行图如下:</p><p><img src="https://image.itweek.top/mweb/2024-03-28-17116092579685-17116087929251.jpg" alt="WireGuard运行图"></p><h4 id="4-2-iPhone配置"><a href="#4-2-iPhone配置" class="headerlink" title="4.2 iPhone配置"></a>4.2 iPhone配置</h4><p>在 <code>App Store </code>下载 WireGuard,从文件导入隧道.</p><p>新建<code>ios_wireguard.conf</code>并上传至 iCloud 云盘.<br>在 iOS 设备 App Store 下载 WireGuard</p><blockquote><p>这里下载<code>WireGuard</code>需要美区账户</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Interface]</span><br><span class="hljs-comment"># 对应客户段分配的 IP</span><br><span class="hljs-attr">Address</span> = <span class="hljs-number">192.168</span>.<span class="hljs-number">100.3</span>/<span class="hljs-number">32</span><br><span class="hljs-comment"># 对应客户端私钥</span><br><span class="hljs-attr">PrivateKey</span> = ios_privatekey<br><span class="hljs-comment"># 本地的 DNS 服务器或者公有 DNS 服务器</span><br><span class="hljs-attr">DNS</span> = <span class="hljs-number">192.168</span>.<span class="hljs-number">50.2</span><br><span class="hljs-section">[Peer]</span><br><span class="hljs-comment">#  OpenWRT的公钥</span><br><span class="hljs-attr">PublicKey</span> = server_publickey<br><span class="hljs-comment"># macOS 如上设置可与 ClashX Pro 共存仅代理局域网,互联网走本地网络.</span><br><span class="hljs-comment"># iPhone iPad 设置为 0.0.0.0/0 全局则模式.</span><br><span class="hljs-attr">AllowedIPs</span> = <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">0</span><br><span class="hljs-comment"># 预共享密钥</span><br><span class="hljs-attr">PresharedKey</span> = sharekey<br><span class="hljs-comment"># wireGuard 端点</span><br><span class="hljs-attr">Endpoint</span> = 公网ip或域名:<span class="hljs-number">16666</span><br><span class="hljs-attr">PersistentKeepalive</span> = <span class="hljs-number">25</span><br></code></pre></td></tr></table></figure><blockquote><p>这里的<code>Address</code>改成<code>192.168.100.3/32</code>，保证唯一.</p></blockquote><p><img src="https://image.itweek.top/mweb/2024-03-28-17116092579698-17116090384878.jpg"></p><p><img src="https://image.itweek.top/mweb/2024-03-28-17116092579711-17116090438550.jpg"></p><h3 id="5-OpenWrt的wireguard运行状态"><a href="#5-OpenWrt的wireguard运行状态" class="headerlink" title="5. OpenWrt的wireguard运行状态"></a>5. OpenWrt的wireguard运行状态</h3><p>最终所有的配置配完后可以在<code>OpenWrt</code>上看到<code>wireguard</code>的运行状态</p><p><img src="https://image.itweek.top/mweb/2024-03-28-17116103124716-17116103056351.jpg" alt="OpenWrt的WireGuard运行状态"></p>]]></content>
    
    
    <categories>
      
      <category>术说</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenWrt</tag>
      
      <tag>Wireguard</tag>
      
      <tag>内网穿透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>部署kubernetes-dashboard改成http免密登录</title>
    <link href="/2024/03/25/%E9%83%A8%E7%BD%B2kubernetes-dashboard%E6%94%B9%E6%88%90http%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
    <url>/2024/03/25/%E9%83%A8%E7%BD%B2kubernetes-dashboard%E6%94%B9%E6%88%90http%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h4 id="原始链接地址"><a href="#原始链接地址" class="headerlink" title="原始链接地址"></a>原始链接地址</h4><blockquote><p><a href="https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml">https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml</a></p></blockquote><h4 id="修改Service端口"><a href="#修改Service端口" class="headerlink" title="修改Service端口"></a>修改Service端口</h4><p>增加80端口，改成http访问</p><p>修改前:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8443</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br></code></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8443</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">https</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">9090</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br></code></pre></td></tr></table></figure><blockquote><p>如果想用 <code>ip+端口</code> 的方式访问，这里需要增加配置，改成 <code>nodeport</code> 的形式，<code>nodePort</code> 改成自己主机空闲的端口，取值范围在 <code>apiserver</code> 的 <code>--service-node-port-range</code> 参数里面可以看得到</p></blockquote><p>最终修改如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8443</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">https</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">32001</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">9090</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">32002</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br></code></pre></td></tr></table></figure><h4 id="修改-deployment-内容"><a href="#修改-deployment-内容" class="headerlink" title="修改 deployment 内容"></a>修改 deployment 内容</h4><h5 id="修改探针检测"><a href="#修改探针检测" class="headerlink" title="修改探针检测"></a>修改探针检测</h5><blockquote><ul><li>后面要修改 dashboard 的启动参数，这里不改的话，活性检测会失败，导致 pod 会不断重启</li></ul></blockquote><p>修改前:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">livenessProbe:</span><br>  <span class="hljs-attr">httpGet:</span><br>    <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTPS</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8443</span><br></code></pre></td></tr></table></figure><p>修改后:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">livenessProbe:</span><br>  <span class="hljs-attr">httpGet:</span><br>    <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">9090</span><br></code></pre></td></tr></table></figure><h5 id="修改镜像拉取策略"><a href="#修改镜像拉取策略" class="headerlink" title="修改镜像拉取策略"></a>修改镜像拉取策略</h5><blockquote><ul><li>官方 <code>yaml</code> 里面默认配置的是 <code>Always</code></li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -i &#x27;s/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g&#x27; recommended.yaml<br></code></pre></td></tr></table></figure><h5 id="修改容器端口"><a href="#修改容器端口" class="headerlink" title="修改容器端口"></a>修改容器端口</h5><p>修改前:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8443</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br></code></pre></td></tr></table></figure><p>修改后:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8443</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9090</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br></code></pre></td></tr></table></figure><h5 id="关闭-token-登录"><a href="#关闭-token-登录" class="headerlink" title="关闭 token 登录"></a>关闭 token 登录</h5><blockquote><ul><li>注释掉 <code>--auto-generate-certificates</code> 参数</li></ul></blockquote><p>修改前:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">args:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">--auto-generate-certificates</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">--namespace=kubernetes-dashboard</span><br>  <span class="hljs-comment"># Uncomment the following line to manually specify Kubernetes API server Host</span><br>  <span class="hljs-comment"># If not specified, Dashboard will attempt to auto discover the API server and connect</span><br>  <span class="hljs-comment"># to it. Uncomment only if the default does not work.</span><br>  <span class="hljs-comment"># - --apiserver-host=http://my-address:port</span><br></code></pre></td></tr></table></figure><p>修改后:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">args:</span><br>  <span class="hljs-comment"># - --auto-generate-certificates</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">--namespace=kubernetes-dashboard</span><br>  <span class="hljs-comment"># Uncomment the following line to manually specify Kubernetes API server Host</span><br>  <span class="hljs-comment"># If not specified, Dashboard will attempt to auto discover the API server and connect</span><br>  <span class="hljs-comment"># to it. Uncomment only if the default does not work.</span><br>  <span class="hljs-comment"># - --apiserver-host=http://my-address:port</span><br></code></pre></td></tr></table></figure><h4 id="完整版yaml"><a href="#完整版yaml" class="headerlink" title="完整版yaml"></a>完整版yaml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Copyright 2017 The Kubernetes Authors.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment"># you may not use this file except in compliance with the License.</span><br><span class="hljs-comment"># You may obtain a copy of the License at</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"># See the License for the specific language governing permissions and</span><br><span class="hljs-comment"># limitations under the License.</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Namespace</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8443</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">https</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30000</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">9090</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30001</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Secret</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard-certs</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">Opaque</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Secret</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard-csrf</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">Opaque</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">csrf:</span> <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Secret</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard-key-holder</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">Opaque</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard-settings</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-attr">rules:</span><br>  <span class="hljs-comment"># Allow Dashboard to get, update and delete Dashboard exclusive secrets.</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;secrets&quot;</span>]<br>    <span class="hljs-attr">resourceNames:</span> [<span class="hljs-string">&quot;kubernetes-dashboard-key-holder&quot;</span>, <span class="hljs-string">&quot;kubernetes-dashboard-certs&quot;</span>, <span class="hljs-string">&quot;kubernetes-dashboard-csrf&quot;</span>]<br>    <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>]<br>    <span class="hljs-comment"># Allow Dashboard to get and update &#x27;kubernetes-dashboard-settings&#x27; config map.</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;configmaps&quot;</span>]<br>    <span class="hljs-attr">resourceNames:</span> [<span class="hljs-string">&quot;kubernetes-dashboard-settings&quot;</span>]<br>    <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>]<br>    <span class="hljs-comment"># Allow Dashboard to get metrics.</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;services&quot;</span>]<br>    <span class="hljs-attr">resourceNames:</span> [<span class="hljs-string">&quot;heapster&quot;</span>, <span class="hljs-string">&quot;dashboard-metrics-scraper&quot;</span>]<br>    <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;proxy&quot;</span>]<br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;services/proxy&quot;</span>]<br>    <span class="hljs-attr">resourceNames:</span> [<span class="hljs-string">&quot;heapster&quot;</span>, <span class="hljs-string">&quot;http:heapster:&quot;</span>, <span class="hljs-string">&quot;https:heapster:&quot;</span>, <span class="hljs-string">&quot;dashboard-metrics-scraper&quot;</span>, <span class="hljs-string">&quot;http:dashboard-metrics-scraper&quot;</span>]<br>    <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>]<br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-attr">rules:</span><br>  <span class="hljs-comment"># Allow Metrics Scraper to get metrics from the Metrics server</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;metrics.k8s.io&quot;</span>]<br>    <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;pods&quot;</span>, <span class="hljs-string">&quot;nodes&quot;</span>]<br>    <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">RoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-attr">subjects:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-attr">subjects:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">securityContext:</span><br>        <span class="hljs-attr">seccompProfile:</span><br>          <span class="hljs-attr">type:</span> <span class="hljs-string">RuntimeDefault</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">kubernetesui/dashboard:v2.7.0</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8443</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9090</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">args:</span><br>            <span class="hljs-comment"># - --auto-generate-certificates</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">--namespace=kubernetes-dashboard</span><br>            <span class="hljs-comment"># Uncomment the following line to manually specify Kubernetes API server Host</span><br>            <span class="hljs-comment"># If not specified, Dashboard will attempt to auto discover the API server and connect</span><br>            <span class="hljs-comment"># to it. Uncomment only if the default does not work.</span><br>            <span class="hljs-comment"># - --apiserver-host=http://my-address:port</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard-certs</span><br>              <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/certs</span><br>              <span class="hljs-comment"># Create on-disk volume to store exec logs</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/tmp</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">tmp-volume</span><br>          <span class="hljs-attr">livenessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-number">9090</span><br>            <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">30</span><br>            <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">30</span><br>          <span class="hljs-attr">securityContext:</span><br>            <span class="hljs-attr">allowPrivilegeEscalation:</span> <span class="hljs-literal">false</span><br>            <span class="hljs-attr">readOnlyRootFilesystem:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">runAsUser:</span> <span class="hljs-number">1001</span><br>            <span class="hljs-attr">runAsGroup:</span> <span class="hljs-number">2001</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard-certs</span><br>          <span class="hljs-attr">secret:</span><br>            <span class="hljs-attr">secretName:</span> <span class="hljs-string">kubernetes-dashboard-certs</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tmp-volume</span><br>          <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">kubernetes-dashboard</span><br>      <span class="hljs-attr">nodeSelector:</span><br>        <span class="hljs-attr">&quot;kubernetes.io/os&quot;:</span> <span class="hljs-string">linux</span><br>      <span class="hljs-comment"># Comment the following tolerations if Dashboard must not be deployed on master</span><br>      <span class="hljs-attr">tolerations:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">node-role.kubernetes.io/master</span><br>          <span class="hljs-attr">effect:</span> <span class="hljs-string">NoSchedule</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">dashboard-metrics-scraper</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">dashboard-metrics-scraper</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8000</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">dashboard-metrics-scraper</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">dashboard-metrics-scraper</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">dashboard-metrics-scraper</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">dashboard-metrics-scraper</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">dashboard-metrics-scraper</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">securityContext:</span><br>        <span class="hljs-attr">seccompProfile:</span><br>          <span class="hljs-attr">type:</span> <span class="hljs-string">RuntimeDefault</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">dashboard-metrics-scraper</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">kubernetesui/metrics-scraper:v1.0.8</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8000</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9090</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">livenessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span><br>            <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">30</span><br>            <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">30</span><br>          <span class="hljs-attr">volumeMounts:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/tmp</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">tmp-volume</span><br>          <span class="hljs-attr">securityContext:</span><br>            <span class="hljs-attr">allowPrivilegeEscalation:</span> <span class="hljs-literal">false</span><br>            <span class="hljs-attr">readOnlyRootFilesystem:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">runAsUser:</span> <span class="hljs-number">1001</span><br>            <span class="hljs-attr">runAsGroup:</span> <span class="hljs-number">2001</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">kubernetes-dashboard</span><br>      <span class="hljs-attr">nodeSelector:</span><br>        <span class="hljs-attr">&quot;kubernetes.io/os&quot;:</span> <span class="hljs-string">linux</span><br>      <span class="hljs-comment"># Comment the following tolerations if Dashboard must not be deployed on master</span><br>      <span class="hljs-attr">tolerations:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">node-role.kubernetes.io/master</span><br>          <span class="hljs-attr">effect:</span> <span class="hljs-string">NoSchedule</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tmp-volume</span><br>          <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>术说</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS 安装NFS</title>
    <link href="/2024/03/24/CentOS%20%E5%AE%89%E8%A3%85NFS/"/>
    <url>/2024/03/24/CentOS%20%E5%AE%89%E8%A3%85NFS/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>Kubernetes 对 Pod 进行调度时，以当时集群中各节点的可用资源作为主要依据，自动选择某一个可用的节点，并将 Pod 分配到该节点上。在这种情况下，Pod 中容器数据的持久化如果存储在所在节点的磁盘上，就会产生不可预知的问题，例如，当 Pod 出现故障，Kubernetes 重新调度之后，Pod 所在的新节点上，并不存在上一次 Pod 运行时所在节点上的数据。</p><p>为了使 Pod 在任何节点上都能够使用同一份持久化存储数据，我们需要使用网络存储的解决方案为 Pod 提供 <a href="https://kuboard.cn/learning/k8s-intermediate/persistent/volume.html">数据卷</a>。常用的网络存储方案有：NFS&#x2F;cephfs&#x2F;glusterfs。</p><p>本文介绍一种使用 centos 搭建 nfs 服务器的方法。此方法仅用于测试目的，请根据您生产环境的实际情况，选择合适的 NFS 服务。</p><h3 id="配置要求"><a href="#配置要求" class="headerlink" title="配置要求"></a>配置要求</h3><ul><li>两台 linux 服务器，centos 7<ul><li>一台用作 nfs server</li><li>另一台用作 nfs 客户端</li></ul></li></ul><h3 id="配置NFS服务器"><a href="#配置NFS服务器" class="headerlink" title="配置NFS服务器"></a>配置NFS服务器</h3><p>本章节中所有命令都以 root 身份执行</p><ul><li><p>执行以下命令安装 nfs 服务器所需的软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y rpcbind nfs-utils    <br></code></pre></td></tr></table></figure></li><li><p>执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;/nfs/data/ *(insecure,rw,sync,no_root_squash)&quot; &gt; /etc/exports<br></code></pre></td></tr></table></figure></li><li><p>执行以下命令，启动 nfs 服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建共享目录，如果要使用自己的目录，请替换本文档中所有的 /root/nfs_root/</span><br><span class="hljs-built_in">mkdir</span> -p /nfs/data<br><br>systemctl <span class="hljs-built_in">enable</span> rpcbind --now<br>systemctl <span class="hljs-built_in">enable</span> nfs-server --now<br>exportfs -r<br></code></pre></td></tr></table></figure></li><li><p>检查配置是否生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@k8s-101 data]<span class="hljs-comment"># exportfs </span><br>/nfs/data       &lt;world&gt; <br></code></pre></td></tr></table></figure></li></ul><h3 id="在客户端测试nfs"><a href="#在客户端测试nfs" class="headerlink" title="在客户端测试nfs"></a>在客户端测试nfs</h3><ul><li><p>本章节中所有命令都以 root 身份执行</p></li><li><p>服务器端防火墙开放111、662、875、892、2049的 tcp &#x2F; udp 允许，否则远端客户无法连接。</p></li><li><p>执行以下命令安装 nfs 客户端所需的软件包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install -y nfs-utils<br></code></pre></td></tr></table></figure></li><li><p>执行以下命令检查 nfs 服务器端是否有设置共享目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># showmount -e $(nfs服务器的IP)</span><br>showmount -e 192.168.50.101<br><span class="hljs-comment"># 输出结果如下所示</span><br>Export list <span class="hljs-keyword">for</span> 192.168.50.101:<br>/nfs/data *<br></code></pre></td></tr></table></figure></li><li><p>执行以下命令挂载 nfs 服务器上的共享目录到本机路径 <code>/root/nfsmount</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /nfs/data<br><span class="hljs-comment"># mount -t nfs $(nfs服务器的IP):/root/nfs_root /root/nfsmount</span><br>mount -t nfs 192.169.50.101:/nfs/data /nfs/data<br><span class="hljs-comment"># 写入一个测试文件</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello nfs server&quot;</span> &gt; /nfs/data/test.txt <br></code></pre></td></tr></table></figure></li><li><p>在 nfs 服务器上执行以下命令，验证文件写入成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> /nfs/data/test.txt<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>术说</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
      <tag>Linux</tag>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS 集群初始化设置</title>
    <link href="/2024/03/23/CentOS%20%E9%9B%86%E7%BE%A4%E5%88%9D%E5%A7%8B%E5%8C%96%E8%AE%BE%E7%BD%AE/"/>
    <url>/2024/03/23/CentOS%20%E9%9B%86%E7%BE%A4%E5%88%9D%E5%A7%8B%E5%8C%96%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h4 id="0-前置操作"><a href="#0-前置操作" class="headerlink" title="0. 前置操作"></a>0. 前置操作</h4><p><a href="https://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/">centos-7.9.2009-isos-x86_64安装包下载_开源镜像站-阿里云</a></p><blockquote><p>下载<code>CentOS-7-x86_64-DVD-2009.iso</code>即可</p></blockquote><h4 id="1-配置静态网络"><a href="#1-配置静态网络" class="headerlink" title="1. 配置静态网络"></a>1. 配置静态网络</h4><h5 id="1-1-查看当前网卡"><a href="#1-1-查看当前网卡" class="headerlink" title="1.1 查看当前网卡"></a>1.1 查看当前网卡</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@k8s-101 ~]# ip address<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000<br>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>    inet 127.0.0.1/8 scope host lo<br>       valid_lft forever preferred_lft forever<br>    inet6 ::1/128 scope host <br>       valid_lft forever preferred_lft forever<br>2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000<br>    link/ether bc:24:11:75:98:ce brd ff:ff:ff:ff:ff:ff<br>    inet 192.168.50.101/24 brd 192.168.50.255 scope global noprefixroute eth0<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::8611:7c0b:51df:bb51/64 scope link tentative noprefixroute dadfailed <br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::4447:3c66:7a30:ad36/64 scope link tentative noprefixroute dadfailed <br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::c575:99dc:8826:b1dd/64 scope link noprefixroute <br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure><p>网卡名即为<code>etho</code></p><h5 id="1-2-修改网卡配置文件"><a href="#1-2-修改网卡配置文件" class="headerlink" title="1.2 修改网卡配置文件"></a>1.2 修改网卡配置文件</h5><blockquote><p>ifcfg-etho,这个eth0即是上图中的网卡名</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/sysconfig/network-scripts/ifcfg-etho<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">TYPE=Ethernet<br>PROXY_METHOD=none<br>BROWSER_ONLY=no<br>BOOTPROTO=static<br>DEFROUTE=yes<br>IPV4_FAILURE_FATAL=no<br>IPV6INIT=yes<br>IPV6_AUTOCONF=yes<br>IPV6_DEFROUTE=yes<br>IPV6_FAILURE_FATAL=no<br>IPV6_ADDR_GEN_MODE=stable-privacy<br>NAME=eth0<br>UUID=24e58ff7-8ef9-46ed-b555-5b157014d3c5<br>DEVICE=eth0<br>ONBOOT=yes<br>IPADDR=192.168.50.101<br>PREFIX=24<br>GATEWAY=192.168.50.2<br>DNS1=192.168.50.2<br>IPV6_PRIVACY=no<br></code></pre></td></tr></table></figure><ul><li><p>修改<code>BOOTPROTO</code>改为<code>none</code>或者<code>static</code></p></li><li><p>新增四项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">IPADDR=192.168.50.101<br>PREFIX=24<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者 NETMASK=255.255.255.0 这个和PREFIX=24意思一样</span><br>GATEWAY=192.168.50.2<br>DNS1=192.168.50.2<br></code></pre></td></tr></table></figure></li></ul><h4 id="2-关闭防火墙、SElinux"><a href="#2-关闭防火墙、SElinux" class="headerlink" title="2. 关闭防火墙、SElinux"></a>2. 关闭防火墙、SElinux</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 防火墙</span></span><br>systemctl stop firewalld.service<br>systemctl disable firewalld.service<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看防火墙状态</span><br>systemctl status firewalld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># selinux</span></span><br>setenforce<br>sed -i &#x27;s/^SELINUX=.*/SELINUX=disabled/&#x27; /etc/selinux/config<br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示 SElinux 状态</span><br>getenforce<br></code></pre></td></tr></table></figure><h4 id="3-修改主机名"><a href="#3-修改主机名" class="headerlink" title="3. 修改主机名"></a>3. 修改主机名</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">永久</span><br>hostnamectl set-hostname xxx <br><span class="hljs-meta prompt_"># </span><span class="language-bash">生效</span><br>bash<br></code></pre></td></tr></table></figure><h4 id="4-配置主机和-IP映射关系"><a href="#4-配置主机和-IP映射关系" class="headerlink" title="4. 配置主机和 IP映射关系"></a>4. 配置主机和 IP映射关系</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/hosts<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 或者如下方式</span></span><br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">注意：如果是集群的话，需要配置多个主机 ip 映射！</span><br>cat &gt;&gt; /etc/hosts &lt;&lt; EFO<br>192.168.78.150 k8s-master1<br>192.168.78.151 k8s-master2<br>192.168.78.152 k8s-master3<br>192.168.78.153 k8s-node1<br>192.168.78.154 k8s-node2<br>EFO<br></code></pre></td></tr></table></figure><h4 id="5-配置阿里网络yum源"><a href="#5-配置阿里网络yum源" class="headerlink" title="5. 配置阿里网络yum源"></a>5. 配置阿里网络yum源</h4><h5 id="5-1-前置操作"><a href="#5-1-前置操作" class="headerlink" title="5.1 前置操作"></a>5.1 前置操作</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装 wget 工具</span><br>yum install -y wget<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">备份本地源</span><br>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup<br></code></pre></td></tr></table></figure><h5 id="5-2-CentOS-Base-repo"><a href="#5-2-CentOS-Base-repo" class="headerlink" title="5.2 CentOS-Base.repo"></a>5.2 CentOS-Base.repo</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 非阿里云ECS要执行</span></span><br>sed -i -e &#x27;/mirrors.cloud.aliyuncs.com/d&#x27; -e &#x27;/mirrors.aliyuncs.com/d&#x27; /etc/yum.repos.d/CentOS-Base.repo<br>epel.repo<br>wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo<br></code></pre></td></tr></table></figure><h5 id="5-3-docker-ce-repo"><a href="#5-3-docker-ce-repo" class="headerlink" title="5.3 docker-ce.repo"></a>5.3 docker-ce.repo</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br><br>sed -i &#x27;s+download.docker.com+mirrors.aliyun.com/docker-ce+&#x27; /etc/yum.repos.d/docker-ce.repo<br><br></code></pre></td></tr></table></figure><h5 id="5-4-kubernetes-repo"><a href="#5-4-kubernetes-repo" class="headerlink" title="5.4 kubernetes.repo"></a>5.4 kubernetes.repo</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo<br>[kubernetes]<br>name=Kubernetes<br>baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/<br>enabled=1<br>gpgcheck=1<br>repo_gpgcheck=1<br>gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg<br>EOF<br><br></code></pre></td></tr></table></figure><h5 id="5-5-yum源准备完毕后，创建元数据"><a href="#5-5-yum源准备完毕后，创建元数据" class="headerlink" title="5.5 yum源准备完毕后，创建元数据"></a>5.5 yum源准备完毕后，创建元数据</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum clean all<br>yum makecache <br></code></pre></td></tr></table></figure><h4 id="6-ssh免密"><a href="#6-ssh免密" class="headerlink" title="6. ssh免密"></a>6. ssh免密</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 生成密钥</span></span><br>ssh-keygen -t rsa<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 公钥复制到其他主机</span></span><br>ssh-copy-id k8s-master1<br>ssh-copy-id k8s-master2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 可以测试访问是否成功</span></span><br>ssh k8s-master2<br></code></pre></td></tr></table></figure><h4 id="7-配置时间同步"><a href="#7-配置时间同步" class="headerlink" title="7.  配置时间同步"></a>7.  配置时间同步</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装 ntpdate 命令</span><br>yum install ntpdate -y<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">跟网络时间做同步</span><br>ntpdate ntp1.aliyun.com<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">把时间同步做成计划任务</span><br>crontab -e<br>* */1 * * * /usr/sbin/ntpdate ntp1.aliyun.com<br></code></pre></td></tr></table></figure><h4 id="8-下载常用命令"><a href="#8-下载常用命令" class="headerlink" title="8. 下载常用命令"></a>8. 下载常用命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install net-tools tree wget lrzsz vim unzip bash-completion build-essential yum-utils telnet telnet-server device-mapper-persistent-data lvm2 nfs-utils gcc gcc-c++ make cmake libxml2-devel openssl-devel curl curl-devel ntp libaio-devel ncurses-devel autoconf automake zlib-devel python-devel epel-release openssh-server socat conntrack ntpdate ipvsadm sysstat iostat<br></code></pre></td></tr></table></figure><h4 id="9-清除邮件提示消息"><a href="#9-清除邮件提示消息" class="headerlink" title="9. 清除邮件提示消息"></a>9. 清除邮件提示消息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">清除 <span class="hljs-string">&quot;您在 /var/spool/mail/root 中有新邮件&quot;</span>信息</span><br>echo &quot;unset MAILCHECK&quot; &gt;&gt; /etc/profile<br>source /etc/profile<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">清空邮箱数据站空间</span><br>cat /dev/null &gt; /var/spool/mail/root<br></code></pre></td></tr></table></figure><h4 id="10-升级内核"><a href="#10-升级内核" class="headerlink" title="10. 升级内核"></a>10. 升级内核</h4><h5 id="10-1-查看当前内核版本"><a href="#10-1-查看当前内核版本" class="headerlink" title="10.1 查看当前内核版本"></a>10.1 查看当前内核版本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master1 data]# uname -r<br>3.10.0-957.el7.x86_64 <br></code></pre></td></tr></table></figure><h5 id="10-2-设置ELRepo源"><a href="#10-2-设置ELRepo源" class="headerlink" title="10.2 设置ELRepo源"></a>10.2 设置ELRepo源</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 导入公钥</span></span><br>rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 安装yum源</span></span><br>yum install https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm<br></code></pre></td></tr></table></figure><h5 id="10-3-查看可用内核"><a href="#10-3-查看可用内核" class="headerlink" title="10.3 查看可用内核"></a>10.3 查看可用内核</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master1 data]# yum --disablerepo \* --enablerepo elrepo-kernel list available <br>已加载插件：fastestmirror, langpacks<br>Loading mirror speeds from cached hostfile<br> * elrepo-kernel: mirrors.tuna.tsinghua.edu.cn<br>可安装的软件包<br>kernel-lt.x86_64                                                          5.4.95-1.el7.elrepo                                          elrepo-kernel<br>kernel-lt-devel.x86_64                                                    5.4.95-1.el7.elrepo                                          elrepo-kernel<br>kernel-lt-doc.noarch                                                      5.4.95-1.el7.elrepo                                          elrepo-kernel<br>kernel-lt-headers.x86_64                                                  5.4.95-1.el7.elrepo                                          elrepo-kernel<br>kernel-lt-tools.x86_64                                                    5.4.95-1.el7.elrepo                                          elrepo-kernel<br>kernel-lt-tools-libs.x86_64                                               5.4.95-1.el7.elrepo                                          elrepo-kernel<br>kernel-lt-tools-libs-devel.x86_64                                         5.4.95-1.el7.elrepo                                          elrepo-kernel<br>kernel-ml.x86_64                                                          5.10.13-1.el7.elrepo                                         elrepo-kernel<br>kernel-ml-devel.x86_64                                                    5.10.13-1.el7.elrepo                                         elrepo-kernel<br>kernel-ml-doc.noarch                                                      5.10.13-1.el7.elrepo                                         elrepo-kernel<br>kernel-ml-headers.x86_64                                                  5.10.13-1.el7.elrepo                                         elrepo-kernel<br>kernel-ml-tools.x86_64                                                    5.10.13-1.el7.elrepo                                         elrepo-kernel<br>kernel-ml-tools-libs.x86_64                                               5.10.13-1.el7.elrepo                                         elrepo-kernel<br>kernel-ml-tools-libs-devel.x86_64                                         5.10.13-1.el7.elrepo                                         elrepo-kernel<br>perf.x86_64                                                               5.10.13-1.el7.elrepo                                         elrepo-kernel<br>python-perf.x86_64                                                        5.10.13-1.el7.elrepo                                         elrepo-kernel <br></code></pre></td></tr></table></figure><h5 id="10-4-安装lt内核"><a href="#10-4-安装lt内核" class="headerlink" title="10.4 安装lt内核"></a>10.4 安装lt内核</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 安装</span></span><br>yum --enablerepo elrepo-kernel -y install kernel-lt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 查看当前所有内核</span></span><br>grubby --info=ALL<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 设置5.4内核为默认启动内核</span></span><br>grub2-set-default 0<br>grub2-reboot 0<br>或<br>grep menuentry /boot/efi/EFI/centos/grub.cfg<br>grub2-set-default &#x27;CentOS Linux (5.4.95-1.el7.x86_64) 7 (Core)&#x27;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 查看修改结果</span></span><br>grub2-editenv list<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 重启服务器</span></span><br>systemctl reboot<br></code></pre></td></tr></table></figure><h5 id="10-5-验证内核版本"><a href="#10-5-验证内核版本" class="headerlink" title="10.5 验证内核版本"></a>10.5 验证内核版本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master1 ~]# uname -r <br>5.4.95-1.el7.elrepo.x86_64<br><br>[root@master2 ~]# uname -r <br>5.4.95-1.el7.elrepo.x86_64<br></code></pre></td></tr></table></figure><h4 id="11-开启内核路由转发功能"><a href="#11-开启内核路由转发功能" class="headerlink" title="11. 开启内核路由转发功能"></a>11. 开启内核路由转发功能</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 临时开始，写入内存</span></span><br>echo 1 &gt; /proc/sys/net/ipv4/ip_forward<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 永久开启写入内核参数</span></span><br>echo &#x27;net.ipv4.ip_forward = 1&#x27; &gt;&gt; /etc/sysctl.conf <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 加载配置</span></span><br>sysctl -p<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 验证是否生效</span></span><br>[root@master2 ~]# sysctl -a | grep &#x27;ip_forward&#x27;<br>net.ipv4.ip_forward = 1<br>net.ipv4.ip_forward_update_priority = 1<br>net.ipv4.ip_forward_use_pmtu = 0<br></code></pre></td></tr></table></figure><h4 id="12-关闭swap分区"><a href="#12-关闭swap分区" class="headerlink" title="12. 关闭swap分区"></a>12. 关闭swap分区</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 临时关闭</span></span><br>swapoff -a<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 永久关闭</span></span><br>sed -i &quot;s/.*swap.*//&quot; /etc/fstab<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>术说</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
      <tag>Linux</tag>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将maven项目打包上传到私服</title>
    <link href="/2024/03/20/%E5%B0%86maven%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E4%B8%8A%E4%BC%A0%E5%88%B0%E7%A7%81%E6%9C%8D/"/>
    <url>/2024/03/20/%E5%B0%86maven%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E4%B8%8A%E4%BC%A0%E5%88%B0%E7%A7%81%E6%9C%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="1-配置私服账户密码"><a href="#1-配置私服账户密码" class="headerlink" title="1. 配置私服账户密码"></a>1. 配置私服账户密码</h3><blockquote><p>在maven 的setting.xml 中配置用户名和密码：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>deployment<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>deploy123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-release<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>deployment<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>deploy123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servers</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-配置项目pom-xml"><a href="#2-配置项目pom-xml" class="headerlink" title="2. 配置项目pom.xml"></a>2. 配置项目pom.xml</h3><p>如果有parent 只需在parent 中的pom.xml 中配置，没有则在本项目的pom.xml 配置即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">distributionManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-release<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://192.168.0.247/nexus/content/repositories/releases/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">snapshotRepository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://192.168.0.247/nexus/content/repositories/snapshots/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">snapshotRepository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">distributionManagement</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 生成sources源码包的插件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-source-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">attach</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">attach</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>attach-sources<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--意思是在什么阶段打包源文件--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>jar-no-fork<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的id【<code>nexus-release</code>和<code>nexus-snapshots</code>】和<code>pom.xml</code> 中对应distributionManagement-&gt; repository 的ID ，用户名和密码需要在nexus 中配置，这里定义了两个Repository，可以根据项目的version后缀自动选择发布到哪一个仓库，例如version是<code>0.0.1-SNAPSHOT</code>,则会发布到<code>snapshotRepository</code>里，具体可以观察打包的maven日志。</p><h3 id="3-执行打包发布命令"><a href="#3-执行打包发布命令" class="headerlink" title="3. 执行打包发布命令"></a>3. 执行打包发布命令</h3><ul><li>执行 maven命令，<code>mvn clean package</code>，执行完成后就会生成相应的jar包文件</li><li>如果你还需要发布到自己的私服，那么就再执行一条命令：mvn deploy就可以发布到你自己的私服上了，这样同项目组的人员就可以查看你的项目的源码和文档了！</li><li>执行 <code>mvn install</code>，maven会自动将source install到repository 。</li><li>执行 <code>mvn deploy –Dmaven.test.skip=true</code>，maven会自动将source deploy到remote-repository 。</li></ul><h3 id="4-手动打包发布"><a href="#4-手动打包发布" class="headerlink" title="4. 手动打包发布"></a>4. 手动打包发布</h3><p>在jar包仓库目录下执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn deploy:deploy-file -DgroupId=[0] -DartifactId=[1] -Dversion=[2] -Dpackaging=jar -Dfile=[3] -Durl=[4] -DrepositoryId=[5] -DpomFile=[6]<br></code></pre></td></tr></table></figure><ul><li>[0] : groupId</li><li>[1] : artifactId</li><li>[2] : version</li><li>[3] : jar包名称</li><li>[4] : 仓库地址</li><li>[5] : 仓库ID，这里和setting.xml 中配置的serverId对应</li><li>[6] : pom名称</li></ul><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn deploy:deploy-file -DgroupId=com.alipay.sdk -DartifactId=alipay-sdk-java -Dversion=4.1.17.ALL -Dpackaging=jar -Dfile=alipay-sdk-java-4.17.9.ALL.jar -Durl=http://172.16.1.22:8081/nexus/content/repositories/snapshots -DrepositoryId=Snapshots -DpomFile=alipay-sdk-java-4.17.9.ALL.pom<br></code></pre></td></tr></table></figure><p><img src="https://image.itweek.top/mweb/2024-03-25-17113484477633-17113484212708.png" alt="image-20220523163357510"></p>]]></content>
    
    
    <categories>
      
      <category>术说</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合WebSocket实践</title>
    <link href="/2024/03/19/SpringBoot%E6%95%B4%E5%90%88WebSocket%E5%AE%9E%E8%B7%B5/"/>
    <url>/2024/03/19/SpringBoot%E6%95%B4%E5%90%88WebSocket%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>先来看下维基百科WebSocket的简介：</p><blockquote><p>WebSocket是一种与<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE">HTTP</a>不同的协议。两者都位于<a href="https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B">OSI模型</a>的<a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E5%B1%82">应用层</a>，并且都依赖于<a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E5%B1%82">传输层</a>的TCP协议。 虽然它们不同，但是RFC 6455中规定：<code>it is designed to work over HTTP ports 80 and 443 as well as to support HTTP proxies and intermediaries</code>（WebSocket通过HTTP端口80和443进行工作，并支持HTTP代理和中介），从而使其与HTTP协议兼容。 为了实现兼容性，WebSocket握手使用HTTP Upgrade头[<a href="https://zh.wikipedia.org/wiki/WebSocket#cite_note-1">1]</a>从HTTP协议更改为WebSocket协议。</p><p>WebSocket协议支持Web<a href="https://zh.wikipedia.org/wiki/%E6%B5%8F%E8%A7%88%E5%99%A8">浏览器</a>（或其他客户端应用程序）与Web<a href="https://zh.wikipedia.org/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a>之间的交互，具有较低的开销，便于实现客户端与服务器的实时数据传输。 服务器可以通过标准化的方式来实现，而无需客户端首先请求内容，并允许消息在保持连接打开的同时来回传递。通过这种方式，可以在客户端和服务器之间进行双向持续对话。 通信通过TCP端口80或443完成，这在防火墙阻止非Web网络连接的环境下是有益的。另外，<a href="https://zh.wikipedia.org/wiki/Comet_(web%E6%8A%80%E6%9C%AF)">Comet</a>之类的技术以非标准化的方式实现了类似的双向通信。</p><p>大多数浏览器都支持该协议，包括<a href="https://zh.wikipedia.org/wiki/Google_Chrome">Google Chrome</a>、<a href="https://zh.wikipedia.org/wiki/Firefox">Firefox</a>、<a href="https://zh.wikipedia.org/wiki/Safari">Safari</a>、<a href="https://zh.wikipedia.org/wiki/Microsoft_Edge">Microsoft Edge</a>、<a href="https://zh.wikipedia.org/wiki/Internet_Explorer">Internet Explorer</a>和<a href="https://zh.wikipedia.org/wiki/Opera%E7%80%8F%E8%A6%BD%E5%99%A8">Opera</a>。</p><p>WebSocket协议规范将<code>ws</code>（WebSocket）和<code>wss</code>（WebSocket Secure）定义为两个新的<a href="https://zh.wikipedia.org/wiki/%E7%B5%B1%E4%B8%80%E8%B3%87%E6%BA%90%E6%A8%99%E8%AD%98%E7%AC%A6">统一资源标识符</a>（URI）方案，分别对应明文和加密连接。除了方案名称和片段ID（不支持<code>#</code>）之外，其余的URI组件都被定义为此URI的通用语法。</p><p>使用浏览器开发人员工具，开发人员可以检查WebSocket握手以及WebSocket框架。</p></blockquote><p>WebSocket用于前端(Web浏览器)和后端(Web服务器)保持长时间连接及数据实时传输。</p><p>客户端首先请求内容，并允许消息在保持连接打开的同时来回传递，通过这种方式，可以在客户端和服务器之间进行双向持续对话。</p><p>扩展：维持http长连接的几种方式有以下几种，具体可网上搜索相关实现，这里只介绍WebSocket保持长连接。</p><ul><li>ajax 轮询</li><li>long poll <strong>长</strong>轮询</li><li>iframe <strong>长连接</strong></li><li>WebSocket.</li></ul><p>以下开始SpringBoot整合WebSocket</p><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.75<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.7.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="开启WebSocket支持"><a href="#开启WebSocket支持" class="headerlink" title="开启WebSocket支持"></a>开启WebSocket支持</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.server.standard.ServerEndpointExporter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 开启WebSocket支持</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/6/21 下午5:01</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServerEndpointExporter <span class="hljs-title function_">serverEndpointExporter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerEndpointExporter</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="会话操作接口封装"><a href="#会话操作接口封装" class="headerlink" title="会话操作接口封装"></a>会话操作接口封装</h4><p>如果需要客户端服务端消息传输，WebSocket提供了<code>javax.websocket.Session</code>类,这里只用到其中几个方法</p><ul><li><strong>socketChannel.getBasicRemote().sendText(msg);</strong></li><li><strong>socketChannel.getAsyncRemote().sendText(msg);</strong></li><li><strong>socketChannel.isOpen();</strong></li><li><strong>socketChannel.close();</strong></li></ul><p>这里定义四个方法，主要是对<code>javax.websocket.Session</code>类操作的封装</p><p>以下是该接口的包装实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * socket会话操作接口</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 该接口面向会话，须基于会话的通道调用。</span><br><span class="hljs-comment"> * 该接口支持扩展，可参考WebSocket模块中&#123;<span class="hljs-doctag">@link</span> com.muly.wave.socket.websocket.operator.channel&#125;包下的类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/6/1 上午11:46</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SocketSessionOperatorApi</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 写出数据，经过责任链</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/6/1 上午11:48</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeAndFlush</span><span class="hljs-params">(Object obj)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 写出数据，不经过责任链</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/6/1 上午11:48</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeToChannel</span><span class="hljs-params">(Object obj)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 关闭会话</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/6/1 上午11:48</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否存活</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> boolean&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/6/1 上午11:50</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isInvalid</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.muly.wave.socket.api.session.SocketSessionOperatorApi;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 对Api模块的操作类进行扩展</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 暂时只写接口，SocketOperatorApi方法不够用时再对此类进行扩展</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/6/1 下午3:44</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SocketChannelExpandInterFace</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SocketSessionOperatorApi</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">import</span> javax.websocket.Session;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Socket操作类实现</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 简单封装Spring Boot的默认WebSocket</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/6/1 下午3:41</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WaveSocketOperator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SocketChannelExpandInterFace</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 实际操作的通道</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Session socketChannel;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WaveSocketOperator</span><span class="hljs-params">(Session socketChannel)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socketChannel = socketChannel;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeAndFlush</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (socketChannel.isOpen()) &#123;<br>                socketChannel.getBasicRemote().sendText(JSON.toJSONString(obj));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeToChannel</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-keyword">if</span> (socketChannel.isOpen()) &#123;<br>            socketChannel.getAsyncRemote().sendText(JSON.toJSONString(obj));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (socketChannel.isOpen()) &#123;<br>                socketChannel.close();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isInvalid</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> socketChannel.isOpen();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SocketSession"><a href="#SocketSession" class="headerlink" title="SocketSession"></a>SocketSession</h4><p>该类持有会话操作接口<code>SocketSessionOperatorApi</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.muly.wave.socket.api.session.SocketSessionOperatorApi;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Socket会话</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/6/1 上午11:28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SocketSession</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SocketSessionOperatorApi</span>&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 会话ID，每一个新建的会话都有(目前使用通道ID)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String sessionId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 会话唯一标识</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 该会话监听的消息类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String messageType;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * token信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String token;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 连接时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Long connectionTime;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 最后活跃时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Long lastActiveTime;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 操作API</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> T socketOperatorApi;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自定义数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Object data;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>接下来再定义个存储SocketSession的会话中心类</p><h4 id="SessionCenter会话中心"><a href="#SessionCenter会话中心" class="headerlink" title="SessionCenter会话中心"></a>SessionCenter会话中心</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.hutool.core.util.ObjectUtil;<br><span class="hljs-keyword">import</span> com.muly.wave.socket.api.session.pojo.SocketSession;<br><span class="hljs-keyword">import</span> com.muly.wave.socket.websocket.operator.channel.WaveSocketOperator;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 会话中心</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 维护所有的会话</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/6/1 下午1:43</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionCenter</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 所有用户会话维护</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ConcurrentMap&lt;String, List&lt;SocketSession&lt;WaveSocketOperator&gt;&gt;&gt; socketSessionMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取维护的所有会话</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> ConcurrentMap&lt; String, SocketSession&lt; WaveSocketOperator &gt;&gt;&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/6/1 下午2:13</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConcurrentMap&lt;String, List&lt;SocketSession&lt;WaveSocketOperator&gt;&gt;&gt; <span class="hljs-title function_">getSocketSessionMap</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> socketSessionMap;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据用户ID获取会话信息列表</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId 用户ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> SocketSession &lt;GunsSocketOperator&gt;&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/6/1 下午1:48</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;SocketSession&lt;WaveSocketOperator&gt;&gt; <span class="hljs-title function_">getSessionByUserId</span><span class="hljs-params">(String userId)</span> &#123;<br>        <span class="hljs-keyword">return</span> socketSessionMap.get(userId);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据用户ID和消息类型获取会话信息列表</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId 用户ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> SocketSession &lt;GunsSocketOperator&gt;&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/6/1 下午1:48</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;SocketSession&lt;WaveSocketOperator&gt;&gt; <span class="hljs-title function_">getSessionByUserIdAndMsgType</span><span class="hljs-params">(String userId)</span> &#123;<br>        <span class="hljs-keyword">return</span> socketSessionMap.get(userId);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据会话ID获取会话信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sessionId 会话ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> SocketSession &lt;GunsSocketOperator&gt;&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/6/1 下午1:48</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SocketSession&lt;WaveSocketOperator&gt; <span class="hljs-title function_">getSessionBySessionId</span><span class="hljs-params">(String sessionId)</span> &#123;<br>        <span class="hljs-keyword">for</span> (List&lt;SocketSession&lt;WaveSocketOperator&gt;&gt; values : socketSessionMap.values()) &#123;<br>            <span class="hljs-keyword">for</span> (SocketSession&lt;WaveSocketOperator&gt; session : values) &#123;<br>                <span class="hljs-keyword">if</span> (sessionId.equals(session.getSessionId())) &#123;<br>                    <span class="hljs-keyword">return</span> session;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置会话</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> socketSession 会话详情</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/6/1 下午1:49</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addSocketSession</span><span class="hljs-params">(SocketSession&lt;WaveSocketOperator&gt; socketSession)</span> &#123;<br>        List&lt;SocketSession&lt;WaveSocketOperator&gt;&gt; socketSessions = socketSessionMap.get(socketSession.getUserId());<br>        <span class="hljs-keyword">if</span> (ObjectUtil.isEmpty(socketSessions)) &#123;<br>            socketSessions = Collections.synchronizedList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br>            socketSessionMap.put(socketSession.getUserId(), socketSessions);<br>        &#125;<br>        socketSessions.add(socketSession);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 连接关闭</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sessionId 会话ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/6/1 下午3:25</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">closed</span><span class="hljs-params">(String sessionId)</span> &#123;<br>        Set&lt;Map.Entry&lt;String, List&lt;SocketSession&lt;WaveSocketOperator&gt;&gt;&gt;&gt; entrySet = socketSessionMap.entrySet();<br>        Iterator&lt;Map.Entry&lt;String, List&lt;SocketSession&lt;WaveSocketOperator&gt;&gt;&gt;&gt; iterator = entrySet.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            Map.Entry&lt;String, List&lt;SocketSession&lt;WaveSocketOperator&gt;&gt;&gt; next = iterator.next();<br>            List&lt;SocketSession&lt;WaveSocketOperator&gt;&gt; value = next.getValue();<br>            <span class="hljs-keyword">if</span> (ObjectUtil.isNotEmpty(value)) &#123;<br>                value.removeIf(GunsSocketOperatorSocketSession -&gt; GunsSocketOperatorSocketSession.getSessionId().equals(sessionId));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个类的主要作用是所有用户会话的维护,存储在支持并发访问的<code>ConcurrentHashMap</code>里，定义的方法主要是用来操作map来实现会话的加入、关闭及查询。</p><h4 id="Socket通用操作类"><a href="#Socket通用操作类" class="headerlink" title="Socket通用操作类"></a>Socket通用操作类</h4><p>有了操作<code>javax.websocket.Session</code>类及会话中心，现在封装一个服务端通过会话中心拿到Session给客户端发送消息的接口.</p><p>定义一个<code>SocketOperatorApi</code>接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.muly.wave.socket.api.exception.SocketException;<br><span class="hljs-keyword">import</span> com.muly.wave.socket.api.message.SocketMsgCallbackInterface;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Socket通用操作类</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 可通过该类直接发送消息，每一个Socket实现的子模块必须实现该接口，以提供统一的操作API</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/6/2 上午9:25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SocketOperatorApi</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送消息到指定会话</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msgType   消息类型可参考&#123;<span class="hljs-doctag">@link</span> com.muly.wave.socket.api.enums&#125;枚举类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sessionId 会话ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg       消息体</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/6/11 下午2:19</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsgOfUserSessionBySessionId</span><span class="hljs-params">(String msgType, String sessionId, Object msg)</span> <span class="hljs-keyword">throws</span> SocketException;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送消息到指定用户的所有会话</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 如果用户同一个消息类型建立了多个会话，则统一全部发送</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msgType 消息类型可参考&#123;<span class="hljs-doctag">@link</span> com.muly.wave.socket.api.enums&#125;枚举类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId  用户ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg     消息体</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/6/2 上午9:35</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsgOfUserSession</span><span class="hljs-params">(String msgType, String userId, Object msg)</span> <span class="hljs-keyword">throws</span> SocketException;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送消息到所有会话</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msgType 消息类型可参考&#123;<span class="hljs-doctag">@link</span> com.muly.wave.socket.api.enums&#125;枚举类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg     消息体</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/6/2 上午9:35</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsgOfAllUserSession</span><span class="hljs-params">(String msgType, Object msg)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据会话id关闭会话</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> socketId 会话id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/8/13 16:00</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">closeSocketBySocketId</span><span class="hljs-params">(String socketId)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 监听指定类型消息</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 1.该方法每调用一次即注册一个监听,同一个消息类型多次调用只有最后一次生效</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msgType           消息类型可参考&#123;<span class="hljs-doctag">@link</span> com.muly.wave.socket.api.enums&#125;枚举类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> callbackInterface 消息监听器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/6/2 上午9:54</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">msgTypeCallback</span><span class="hljs-params">(String msgType, SocketMsgCallbackInterface callbackInterface)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以下为该接口的实现类,该实现类主要用于服务端向客户端发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.hutool.core.util.ObjectUtil;<br><span class="hljs-keyword">import</span> com.muly.wave.socket.api.SocketOperatorApi;<br><span class="hljs-keyword">import</span> com.muly.wave.socket.api.exception.SocketException;<br><span class="hljs-keyword">import</span> com.muly.wave.socket.api.exception.enums.SocketExceptionEnum;<br><span class="hljs-keyword">import</span> com.muly.wave.socket.api.message.SocketMsgCallbackInterface;<br><span class="hljs-keyword">import</span> com.muly.wave.socket.api.session.pojo.SocketSession;<br><span class="hljs-keyword">import</span> com.muly.wave.socket.websocket.message.SocketMessageCenter;<br><span class="hljs-keyword">import</span> com.muly.wave.socket.websocket.operator.channel.WaveSocketOperator;<br><span class="hljs-keyword">import</span> com.muly.wave.socket.websocket.pojo.WebSocketMessageDTO;<br><span class="hljs-keyword">import</span> com.muly.wave.socket.websocket.session.SessionCenter;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * WebSocket操作实现类</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 如果是Spring boot项目，通过注入SocketOperatorApi接口操作socket，需将本来交给Spring管理</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/6/2 上午10:41</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketOperator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SocketOperatorApi</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsgOfUserSessionBySessionId</span><span class="hljs-params">(String msgType, String sessionId, Object msg)</span> <span class="hljs-keyword">throws</span> SocketException &#123;<br>        SocketSession&lt;WaveSocketOperator&gt; session = SessionCenter.getSessionBySessionId(sessionId);<br>        <span class="hljs-keyword">if</span> (ObjectUtil.isEmpty(session)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SocketException</span>(SocketExceptionEnum.SESSION_NOT_EXIST);<br>        &#125;<br>        <span class="hljs-type">WebSocketMessageDTO</span> <span class="hljs-variable">webSocketMessageDTO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocketMessageDTO</span>();<br>        webSocketMessageDTO.setData(msg);<br>        webSocketMessageDTO.setServerMsgType(msgType);<br>        session.getSocketOperatorApi().writeAndFlush(webSocketMessageDTO);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsgOfUserSession</span><span class="hljs-params">(String msgType, String userId, Object msg)</span> <span class="hljs-keyword">throws</span> SocketException &#123;<br>        <span class="hljs-comment">// 根据用户ID获取会话</span><br>        List&lt;SocketSession&lt;WaveSocketOperator&gt;&gt; socketSessionList = SessionCenter.getSessionByUserIdAndMsgType(userId);<br>        <span class="hljs-keyword">if</span> (ObjectUtil.isEmpty(socketSessionList)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SocketException</span>(SocketExceptionEnum.SESSION_NOT_EXIST);<br>        &#125;<br>        <span class="hljs-type">WebSocketMessageDTO</span> <span class="hljs-variable">webSocketMessageDTO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocketMessageDTO</span>();<br>        webSocketMessageDTO.setData(msg);<br>        webSocketMessageDTO.setServerMsgType(msgType);<br>        <span class="hljs-keyword">for</span> (SocketSession&lt;WaveSocketOperator&gt; session : socketSessionList) &#123;<br>            <span class="hljs-comment">// 发送内容</span><br>            session.getSocketOperatorApi().writeAndFlush(webSocketMessageDTO);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsgOfAllUserSession</span><span class="hljs-params">(String msgType, Object msg)</span> &#123;<br>        Collection&lt;List&lt;SocketSession&lt;WaveSocketOperator&gt;&gt;&gt; values = SessionCenter.getSocketSessionMap().values();<br>        <span class="hljs-type">WebSocketMessageDTO</span> <span class="hljs-variable">webSocketMessageDTO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocketMessageDTO</span>();<br>        webSocketMessageDTO.setData(msg);<br>        webSocketMessageDTO.setServerMsgType(msgType);<br>        <span class="hljs-keyword">for</span> (List&lt;SocketSession&lt;WaveSocketOperator&gt;&gt; sessions : values) &#123;<br>            <span class="hljs-keyword">for</span> (SocketSession&lt;WaveSocketOperator&gt; session : sessions) &#123;<br>                <span class="hljs-comment">// 找到该类型的通道</span><br>                <span class="hljs-keyword">if</span> (session.getMessageType().equals(msgType)) &#123;<br>                    session.getSocketOperatorApi().writeAndFlush(webSocketMessageDTO);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">closeSocketBySocketId</span><span class="hljs-params">(String socketId)</span> &#123;<br>        SessionCenter.closed(socketId);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">msgTypeCallback</span><span class="hljs-params">(String msgType, SocketMsgCallbackInterface callbackInterface)</span> &#123;<br>        SocketMessageCenter.setMessageListener(msgType, callbackInterface);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该接口涉及到一个WebSocket交互通用对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.muly.wave.socket.api.SocketOperatorApi;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * WebSocket交互通用对象</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/6/1 下午2:56</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketMessageDTO</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 服务端发送的消息类型(客户端如果需要监听该消息类型，注册对应的消息处理器即可)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String serverMsgType;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 客户端发送的消息类型(服务端需要处理的消息类型)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String clientMsgType;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 目标Id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String toUserId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送者ID</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String formUserId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 具体发送的数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Object data;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>鉴于以上多次提到了，<code>msgType</code>这个属性，这个类型定义了消息类型，用于区分服务端与客户端之间消息通讯的类型</p><p>以下定义了三种类型的枚举方便管理，</p><ul><li><p><strong>SystemMessageTypeEnum</strong> </p><p>该枚举适用于服务端监听首次连接和断开连接，以<code>S00</code>开头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 服务端监听器枚举</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 说明：该枚举适用于服务端监听首次连接和断开连接</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/6/3 上午9:14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">SystemMessageTypeEnum</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 监听首次连接</span><br><span class="hljs-comment">     */</span><br>    SYS_LISTENER_ONOPEN(<span class="hljs-string">&quot;S00001&quot;</span>, <span class="hljs-string">&quot;监听首次连接&quot;</span>),<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 监听断开连接</span><br><span class="hljs-comment">     */</span><br>    SYS_LISTENER_ONCLOSE(<span class="hljs-string">&quot;S00002&quot;</span>, <span class="hljs-string">&quot;监听断开连接&quot;</span>),<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 监听异常信息</span><br><span class="hljs-comment">     */</span><br>    SYS_LISTENER_ONERROR(<span class="hljs-string">&quot;S00003&quot;</span>, <span class="hljs-string">&quot;监听异常信息&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String code;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br><br>    SystemMessageTypeEnum(String code, String name) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>ServerMessageTypeEnum</strong></p><p>该枚举适用于服务器推送给客户端消息时使用，以<code>100</code>开头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 服务端消息类型枚举</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 说明：该枚举适用于服务器推送给客户端消息时使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/6/3 上午9:14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ServerMessageTypeEnum</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统通知消息类型</span><br><span class="hljs-comment">     */</span><br>    SYS_NOTICE_MSG_TYPE(<span class="hljs-string">&quot;100001&quot;</span>, <span class="hljs-string">&quot;系统通知消息类型&quot;</span>),<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 连接消息回复</span><br><span class="hljs-comment">     */</span><br>    SYS_REPLY_MSG_TYPE(<span class="hljs-string">&quot;100002&quot;</span>, <span class="hljs-string">&quot;连接消息回复&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String code;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br><br>    ServerMessageTypeEnum(String code, String name) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>ClientMessageTypeEnum</strong></p><p>该枚举适用于服务器接收到客户端发来的消息，判断消息类型时使用,以<code>200</code>开头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 客户端消息类型枚举</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 说明：该枚举适用于服务器接收到客户端发来的消息，判断消息类型时使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/6/3 上午9:14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ClientMessageTypeEnum</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户连接鉴权</span><br><span class="hljs-comment">     */</span><br>    USER_CONNECTION_AUTHENTICATION(<span class="hljs-string">&quot;200000&quot;</span>, <span class="hljs-string">&quot;用户连接鉴权&quot;</span>),<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户心跳消息类型</span><br><span class="hljs-comment">     */</span><br>    USER_HEART(<span class="hljs-string">&quot;299999&quot;</span>, <span class="hljs-string">&quot;用户心跳消息类型&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String code;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br><br>    ClientMessageTypeEnum(String code, String name) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>特殊说明一下<code>serverMsgType</code>和<code>clientMsgType</code>的区别<br>1.<code>serverMsgType</code>字段是服务端发送给客户端的字段<br>2.<code>clientMsgType</code>字段是客户端发送给服务器的字段<br>例如：客户端发送给服务器一个心跳消息(type:299999)，服务端如果需要处理该消息就注册一个该消息的监听器，那么收到消息服务端会把消息推送给对应的监听器，接口见{@link SocketOperatorApi#msgTypeCallback}</p></blockquote></li></ul><p>上述四个方法中，还涉及到一个方法<code>void msgTypeCallback(String msgType, SocketMsgCallbackInterface callbackInterface);</code></p><p>其中<code>SocketMsgCallbackInterface</code>为Socket消息接收回调接口，根据枚举类型注入相应的消息处理方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.muly.wave.socket.api.session.pojo.SocketSession;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Socket消息接收回调接口</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/6/2 上午9:53</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SocketMsgCallbackInterface</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 收到消息的回调</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msgType       消息类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg           消息体</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> socketSession 本次通信的会话</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/6/2 上午9:51</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">callback</span><span class="hljs-params">(String msgType, Object msg, SocketSession socketSession)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>该接口是一个函数式接口，可以使用java8的lambda表达式注入回调方法。</p><p>再次构造个消息回调方法中心，用于存储各种消息类型的消息回调方法处理。messageListenerMap的key即为<code>msgType</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.muly.wave.socket.api.message.SocketMsgCallbackInterface;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 会话消息中心</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 维护所有消息类型对应的处理器</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/6/1 下午2:20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SocketMessageCenter</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 所有消息监听器维护</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, SocketMsgCallbackInterface&gt; messageListenerMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置消息类型的监听器</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msgType  消息类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> listener 监听器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/6/1 下午2:25</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessageListener</span><span class="hljs-params">(String msgType, SocketMsgCallbackInterface listener)</span> &#123;<br>        messageListenerMap.put(msgType, listener);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取消息监听器</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msgType 消息类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> SocketMsgCallbackInterface&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/6/1 下午2:26</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SocketMsgCallbackInterface <span class="hljs-title function_">getSocketMsgCallbackInterface</span><span class="hljs-params">(String msgType)</span> &#123;<br>        <span class="hljs-keyword">return</span> messageListenerMap.get(msgType);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="消息监听处理器WebSocketServer"><a href="#消息监听处理器WebSocketServer" class="headerlink" title="消息监听处理器WebSocketServer"></a>消息监听处理器WebSocketServer</h4><p>该类为WebSocket的入口类，用于处理和客户端的连接关闭及接收客户端发送的消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.hutool.core.util.ObjectUtil;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.muly.wave.socket.api.enums.ClientMessageTypeEnum;<br><span class="hljs-keyword">import</span> com.muly.wave.socket.api.enums.ServerMessageTypeEnum;<br><span class="hljs-keyword">import</span> com.muly.wave.socket.api.enums.SystemMessageTypeEnum;<br><span class="hljs-keyword">import</span> com.muly.wave.socket.api.message.SocketMsgCallbackInterface;<br><span class="hljs-keyword">import</span> com.muly.wave.socket.api.session.pojo.SocketSession;<br><span class="hljs-keyword">import</span> com.muly.wave.socket.websocket.message.SocketMessageCenter;<br><span class="hljs-keyword">import</span> com.muly.wave.socket.websocket.operator.channel.WaveSocketOperator;<br><span class="hljs-keyword">import</span> com.muly.wave.socket.websocket.pojo.WebSocketMessageDTO;<br><span class="hljs-keyword">import</span> com.muly.wave.socket.websocket.session.SessionCenter;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.websocket.*;<br><span class="hljs-keyword">import</span> javax.websocket.server.PathParam;<br><span class="hljs-keyword">import</span> javax.websocket.server.ServerEndpoint;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 消息监听处理器</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/6/1 下午2:35</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@ServerEndpoint(value = &quot;/webSocket/&#123;token&#125;&quot;)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketServer</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 连接建立调用的方法</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 暂时无用，需要在建立连接的时候做一些事情的话可以修改这里</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> session 会话信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/6/21 下午5:14</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-meta">@OnOpen</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onOpen</span><span class="hljs-params">(Session session, <span class="hljs-meta">@PathParam(&quot;token&quot;)</span> String token)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> token;<br>        <br>        <span class="hljs-comment">// todo 这里可以加上token校验处理获取用户信息</span><br><span class="hljs-comment">//        try &#123;</span><br><span class="hljs-comment">//            // 解析用户信息</span><br><span class="hljs-comment">//            DefaultJwtPayload defaultPayload = JwtContext.me().getDefaultPayload(token);</span><br><span class="hljs-comment">//            userId = defaultPayload.getUserId().toString();</span><br><span class="hljs-comment">//        &#125; catch (io.jsonwebtoken.JwtException e) &#123;</span><br><span class="hljs-comment">//            try &#123;</span><br><span class="hljs-comment">//                session.close();</span><br><span class="hljs-comment">//            &#125; catch (IOException ioException) &#123;</span><br><span class="hljs-comment">//                ioException.printStackTrace();</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-comment">// 操作api包装</span><br>        <span class="hljs-type">WaveSocketOperator</span> <span class="hljs-variable">gunsSocketOperator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WaveSocketOperator</span>(session);<br><br>        <span class="hljs-comment">// 回复消息</span><br>        <span class="hljs-type">WebSocketMessageDTO</span> <span class="hljs-variable">replyMsg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocketMessageDTO</span>();<br>        replyMsg.setServerMsgType(ServerMessageTypeEnum.SYS_REPLY_MSG_TYPE.getCode());<br>        replyMsg.setToUserId(userId);<br><br>        <span class="hljs-comment">// 创建会话对象</span><br>        SocketSession&lt;WaveSocketOperator&gt; socketSession = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SocketSession</span>&lt;&gt;();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 设置回复内容</span><br>            replyMsg.setData(session.getId());<br>            socketSession.setSessionId(session.getId());<br>            socketSession.setUserId(userId);<br>            socketSession.setSocketOperatorApi(gunsSocketOperator);<br>            socketSession.setToken(token);<br>            socketSession.setConnectionTime(System.currentTimeMillis());<br><br>            <span class="hljs-comment">// 维护会话</span><br>            SessionCenter.addSocketSession(socketSession);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 回复消息</span><br>            gunsSocketOperator.writeAndFlush(replyMsg);<br><br>            <span class="hljs-comment">// 触发首次连接回调</span><br>            <span class="hljs-type">SocketMsgCallbackInterface</span> <span class="hljs-variable">socketMsgCallbackInterface</span> <span class="hljs-operator">=</span> SocketMessageCenter.getSocketMsgCallbackInterface(SystemMessageTypeEnum.SYS_LISTENER_ONOPEN.getCode());<br>            <span class="hljs-keyword">if</span> (ObjectUtil.isNotEmpty(socketMsgCallbackInterface)) &#123;<br>                <span class="hljs-comment">// 触发回调</span><br>                socketMsgCallbackInterface.callback(SystemMessageTypeEnum.SYS_LISTENER_ONOPEN.getCode(), <span class="hljs-literal">null</span>, socketSession);<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 连接关闭调用的方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> session 会话信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/6/21 下午5:14</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-meta">@OnClose</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClose</span><span class="hljs-params">(Session session)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            SocketSession&lt;WaveSocketOperator&gt; socketSession = SessionCenter.getSessionBySessionId(session.getId());<br>            <span class="hljs-comment">// 触发首次连接回调</span><br>            <span class="hljs-type">SocketMsgCallbackInterface</span> <span class="hljs-variable">socketMsgCallbackInterface</span> <span class="hljs-operator">=</span> SocketMessageCenter.getSocketMsgCallbackInterface(SystemMessageTypeEnum.SYS_LISTENER_ONCLOSE.getCode());<br>            <span class="hljs-keyword">if</span> (ObjectUtil.isNotEmpty(socketMsgCallbackInterface)) &#123;<br>                <span class="hljs-comment">// 触发回调</span><br>                socketMsgCallbackInterface.callback(SystemMessageTypeEnum.SYS_LISTENER_ONCLOSE.getCode(), <span class="hljs-literal">null</span>, socketSession);<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            SessionCenter.closed(session.getId());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 收到消息调用的方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message       　接收到的消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> socketChannel 会话信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/6/21 下午5:14</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-meta">@OnMessage</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessage</span><span class="hljs-params">(String message, Session socketChannel)</span> &#123;<br><br>        <span class="hljs-comment">// 转换为Java对象</span><br>        <span class="hljs-type">WebSocketMessageDTO</span> <span class="hljs-variable">webSocketMessageDTO</span> <span class="hljs-operator">=</span> JSON.parseObject(message, WebSocketMessageDTO.class);<br><br>        <span class="hljs-comment">// 维护通道是否已初始化</span><br>        SocketSession&lt;WaveSocketOperator&gt; socketSession = SessionCenter.getSessionBySessionId(socketChannel.getId());<br><br>        <span class="hljs-comment">// 心跳包</span><br>        <span class="hljs-keyword">if</span> (ObjectUtil.isNotEmpty(socketSession) &amp;&amp; ClientMessageTypeEnum.USER_HEART.getCode().equals(webSocketMessageDTO.getClientMsgType())) &#123;<br>            <span class="hljs-comment">// 更新会话最后活跃时间</span><br>            <span class="hljs-keyword">if</span> (ObjectUtil.isNotEmpty(socketSession)) &#123;<br>                socketSession.setLastActiveTime(System.currentTimeMillis());<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 用户ID为空不处理直接跳过</span><br>        <span class="hljs-keyword">if</span> (ObjectUtil.isEmpty(webSocketMessageDTO.getFormUserId())) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 会话建立成功执行业务逻辑</span><br>        <span class="hljs-keyword">if</span> (ObjectUtil.isNotEmpty(socketSession)) &#123;<br><br>            <span class="hljs-comment">// 更新最后会话时间</span><br>            socketSession.setLastActiveTime(System.currentTimeMillis());<br><br>            <span class="hljs-comment">// 找到该消息的处理器</span><br>            <span class="hljs-type">SocketMsgCallbackInterface</span> <span class="hljs-variable">socketMsgCallbackInterface</span> <span class="hljs-operator">=</span> SocketMessageCenter.getSocketMsgCallbackInterface(webSocketMessageDTO.getClientMsgType());<br>            <span class="hljs-keyword">if</span> (ObjectUtil.isNotEmpty(socketMsgCallbackInterface)) &#123;<br>                <span class="hljs-comment">// 触发回调</span><br>                socketMsgCallbackInterface.callback(webSocketMessageDTO.getClientMsgType(), webSocketMessageDTO, socketSession);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                socketChannel.getAsyncRemote().sendText(<span class="hljs-string">&quot;&#123;\&quot;serverMsgType\&quot;:\&quot;404\&quot;&#125;&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 会话发送异常调用的方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> session 会话信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> error   　错误信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> wave-muly</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/6/21 下午5:14</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-meta">@OnError</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(Session session, Throwable error)</span> &#123;<br>        SocketSession&lt;WaveSocketOperator&gt; socketSession = SessionCenter.getSessionBySessionId(session.getId());<br>        <span class="hljs-comment">// 触发首次连接回调</span><br>        <span class="hljs-type">SocketMsgCallbackInterface</span> <span class="hljs-variable">socketMsgCallbackInterface</span> <span class="hljs-operator">=</span> SocketMessageCenter.getSocketMsgCallbackInterface(SystemMessageTypeEnum.SYS_LISTENER_ONERROR.getCode());<br>        <span class="hljs-keyword">if</span> (ObjectUtil.isNotEmpty(socketMsgCallbackInterface)) &#123;<br>            <span class="hljs-comment">// 触发回调</span><br>            socketMsgCallbackInterface.callback(SystemMessageTypeEnum.SYS_LISTENER_ONERROR.getCode(), error, socketSession);<br>        &#125;<br>        log.error(<span class="hljs-string">&quot;session 发生错误:&quot;</span> + session.getId());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述类中存在处理逻辑，定义了首次连接回调的方法，这里会去找<code>SocketMessageCenter</code>方法操作中心里的<code>SystemMessageTypeEnum.SYS_LISTENER_ONOPEN</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 触发首次连接回调</span><br>         <span class="hljs-type">SocketMsgCallbackInterface</span> <span class="hljs-variable">socketMsgCallbackInterface</span> <span class="hljs-operator">=</span> SocketMessageCenter.getSocketMsgCallbackInterface(SystemMessageTypeEnum.SYS_LISTENER_ONOPEN.getCode());<br>         <span class="hljs-keyword">if</span> (ObjectUtil.isNotEmpty(socketMsgCallbackInterface)) &#123;<br>             <span class="hljs-comment">// 触发回调</span><br>             socketMsgCallbackInterface.callback(SystemMessageTypeEnum.SYS_LISTENER_ONOPEN.getCode(), <span class="hljs-literal">null</span>, socketSession);<br>         &#125;<br></code></pre></td></tr></table></figure><p>以下为示例,项目启动时注入一个首次连接回调处理方法：在<code>msgType</code>为SystemMessageTypeEnum.SYS_LISTENER_ONOPEN(<code>S00001</code>)时会调用该接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: wave-muly</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2021/10/9 14:09</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Order(99)</span><br><span class="hljs-meta">@RequiredArgsConstructor(onConstructor = @__(@Autowired))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SocketOperatorApi socketOperatorApi;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 项目启动默认注册了 监听首次连接的监听器 在客户端连接时会调用该监听器</span><br>        socketOperatorApi.msgTypeCallback(SystemMessageTypeEnum.SYS_LISTENER_ONOPEN.getCode(), (msgType, msg, socketSession)-&gt;&#123;<br>            log.info(<span class="hljs-string">&quot;connection success&quot;</span>);<br>            socketSession.getSocketOperatorApi().writeAndFlush(<span class="hljs-string">&quot;connection success&quot;</span>);<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再定义一个服务端向客户端发送消息的示例，这里定义一个Controller</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs json">import com.muly.wave.socket.api.SocketOperatorApi;<br>import com.muly.wave.socket.api.enums.ServerMessageTypeEnum;<br>import com.muly.wave.socket.api.exception.SocketException;<br>import com.muly.wave.socket.websocket.pojo.SysMessage;<br>import lombok.RequiredArgsConstructor;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.http.MediaType;<br>import org.springframework.web.bind.annotation.*;<br><br>import java.util.Date;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @Author: wave-muly</span><br><span class="hljs-comment"> * @Date: 2021/10/9 11:28</span><br><span class="hljs-comment"> */</span><br>@RequestMapping(<span class="hljs-string">&quot;/api/v1/sys&quot;</span>)<br>@RestController<br>@RequiredArgsConstructor(onConstructor = @__(@Autowired))<br>public class SysMessageController <span class="hljs-punctuation">&#123;</span><br><br>    private final SocketOperatorApi socketOperatorApi;<br><br>    @PostMapping(value = <span class="hljs-string">&quot;/notice/&#123;userId&#125;&quot;</span><span class="hljs-punctuation">,</span> produces = MediaType.APPLICATION_JSON_VALUE)<br>    public void notice(@PathVariable(name = <span class="hljs-string">&quot;userId&quot;</span>) String userId<span class="hljs-punctuation">,</span> @RequestBody String messageContent) <span class="hljs-punctuation">&#123;</span><br>        SysMessage item = new SysMessage();<br>        item.setReceiveUserId(Long.valueOf(userId));<br>        item.setMessageContent(messageContent);<br>        item.setMessageType(ServerMessageTypeEnum.SYS_NOTICE_MSG_TYPE.getCode());<br>        item.setMessageSendTime(new Date());<br>        try <span class="hljs-punctuation">&#123;</span><br>            socketOperatorApi.sendMsgOfUserSession(ServerMessageTypeEnum.SYS_NOTICE_MSG_TYPE.getCode()<span class="hljs-punctuation">,</span> item.getReceiveUserId().toString()<span class="hljs-punctuation">,</span> item);<br>        <span class="hljs-punctuation">&#125;</span> catch (SocketException socketException) <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-comment">// 该用户不在线</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>以下为浏览器测试  [**WebSocket在线测试**](<a href="http://websocket.jsonin.com/">WebSocket在线测试_在线模拟websocket请求工具 (jsonin.com)</a>)</p><p><img src="https://image.itweek.top/mweb/2024-03-25-17113487373348-17113486980461.png"></p><p><img src="https://image.itweek.top/mweb/2024-03-25-17113487373373-17113486980480.png" alt="image-20220424165738022"></p><p>至此SpringBoot整合WebSocket完成，后续项目集成，只需要定义好<code>msgType</code>消息类型、处理token校验逻辑即可。<br>代码详见 <a href="https://github.com/mulyzhou/wave-socket">wave-socket</a></p>]]></content>
    
    
    <categories>
      
      <category>术说</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>WebSocket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次语音合成遇到的坑：PCM音频流转WAV</title>
    <link href="/2024/03/18/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%EF%BC%9APCM%E9%9F%B3%E9%A2%91%E6%B5%81%E8%BD%ACWAV/"/>
    <url>/2024/03/18/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%EF%BC%9APCM%E9%9F%B3%E9%A2%91%E6%B5%81%E8%BD%ACWAV/</url>
    
    <content type="html"><![CDATA[<ul><li>需求内容:</li></ul><blockquote><p>预合成音：支持将固定音合成并完成上传操作</p></blockquote><ul><li><p>解决思路:</p><ol><li>调用公有云识别引擎，获取识别引擎合成的音频流，</li><li>然后将音频流转成wav文件，</li><li>最后将文件上传到oss服务器上。</li></ol></li><li><p>遇到的问题</p><p>问题主要在于，拿到了引擎给的base64的音频流，将音频流用base64解码转成byte[]数组后写入wav格式文件内，但是这个<strong>文件始终无法播放</strong>。</p></li><li><p>排坑过程</p><p>刚开始一直以为是base64解码有问题，换了多种base64工具解码，还是无法播放；<br>然后找到了<br><a href="https://www.hitoy.org/tool/file_base64.php">文件Base64在线编码和解码工具</a><br>这个网站对我生成的文件进行base64编码，再和从引擎获取到的base64对比，发现是<strong>一致的</strong>，可排除base64解码问题。</p><p>这个花了很长时间去排查，还是未解决。</p><p>最后请教了识别引擎的研发人员，最终才知道。<strong>引擎的返回的是PCM音频流。PCM只是单纯的一个文件流。播放器要想播放，你需要告诉播放器这个文件流是什么采样率的是8bit还是16bit的一共多长。</strong></p><p>pcm流需要专门的软件播放。</p><p>我是用WAV格式研究PCM流。两个文件只差了一个文件头。</p><p>最后附上pcm转wav格式的工具类：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pcm2WavUtils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">convertAudioFiles</span><span class="hljs-params">(String src, String target)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(src);<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(target);<br><br>        <span class="hljs-comment">//计算长度</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">4</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> fis.read(buf);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">PCMSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (size != -<span class="hljs-number">1</span>) &#123;<br>            PCMSize += size;<br>            size = fis.read(buf);<br>        &#125;<br>        fis.close();<br><br>        <span class="hljs-comment">//填入参数，比特率等等。这里用的是16位单声道 8000 hz</span><br>        <span class="hljs-type">WaveHeader</span> <span class="hljs-variable">header</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WaveHeader</span>();<br>        <span class="hljs-comment">//长度字段 = 内容的大小（PCMSize) + 头部字段的大小(不包括前面4字节的标识符RIFF以及fileLength本身的4字节)</span><br>        header.fileLength = PCMSize + (<span class="hljs-number">44</span> - <span class="hljs-number">8</span>);<br>        header.FmtHdrLeth = <span class="hljs-number">16</span>;<br>        header.BitsPerSample = <span class="hljs-number">16</span>;<br>        header.Channels = <span class="hljs-number">1</span>;<br>        header.FormatTag = <span class="hljs-number">0x0001</span>;<br>        header.SamplesPerSec = <span class="hljs-number">8000</span>;<br>        header.BlockAlign = (<span class="hljs-type">short</span>)(header.Channels * header.BitsPerSample / <span class="hljs-number">8</span>);<br>        header.AvgBytesPerSec = header.BlockAlign * header.SamplesPerSec;<br>        header.DataHdrLeth = PCMSize;<br><br>        <span class="hljs-type">byte</span>[] h = header.getHeader();<br><br>        <span class="hljs-keyword">assert</span> h.length == <span class="hljs-number">44</span>; <span class="hljs-comment">//WAV标准，头部应该是44字节</span><br>        <span class="hljs-comment">//write header</span><br>        fos.write(h, <span class="hljs-number">0</span>, h.length);<br>        <span class="hljs-comment">//write data stream</span><br>        fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(src);<br>        size = fis.read(buf);<br>        <span class="hljs-keyword">while</span> (size != -<span class="hljs-number">1</span>) &#123;<br>            fos.write(buf, <span class="hljs-number">0</span>, size);<br>            size = fis.read(buf);<br>        &#125;<br>        fis.close();<br>        fos.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>文件头：WaveHeader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WaveHeader</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> fileID[] = &#123; <span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span> &#125;;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> fileLength;<br><span class="hljs-keyword">public</span> <span class="hljs-type">char</span> wavTag[] = &#123; <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span> &#125;;;<br><span class="hljs-keyword">public</span> <span class="hljs-type">char</span> FmtHdrID[] = &#123; <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span> &#125;;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> FmtHdrLeth;<br><span class="hljs-keyword">public</span> <span class="hljs-type">short</span> FormatTag;<br><span class="hljs-keyword">public</span> <span class="hljs-type">short</span> Channels;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> SamplesPerSec;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> AvgBytesPerSec;<br><span class="hljs-keyword">public</span> <span class="hljs-type">short</span> BlockAlign;<br><span class="hljs-keyword">public</span> <span class="hljs-type">short</span> BitsPerSample;<br><span class="hljs-keyword">public</span> <span class="hljs-type">char</span> DataHdrID[] = &#123; <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span> &#125;;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> DataHdrLeth;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] getHeader() <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>WriteChar(bos, fileID);<br>WriteInt(bos, fileLength);<br>WriteChar(bos, wavTag);<br>WriteChar(bos, FmtHdrID);<br>WriteInt(bos, FmtHdrLeth);<br>WriteShort(bos, FormatTag);<br>WriteShort(bos, Channels);<br>WriteInt(bos, SamplesPerSec);<br>WriteInt(bos, AvgBytesPerSec);<br>WriteShort(bos, BlockAlign);<br>WriteShort(bos, BitsPerSample);<br>WriteChar(bos, DataHdrID);<br>WriteInt(bos, DataHdrLeth);<br>bos.flush();<br><span class="hljs-type">byte</span>[] r = bos.toByteArray();<br>bos.close();<br><span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">WriteShort</span><span class="hljs-params">(ByteArrayOutputStream bos, <span class="hljs-type">int</span> s)</span><br><span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">byte</span>[] mybyte = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">2</span>];<br>mybyte[<span class="hljs-number">1</span>] = (<span class="hljs-type">byte</span>) ((s &lt;&lt; <span class="hljs-number">16</span>) &gt;&gt; <span class="hljs-number">24</span>);<br>mybyte[<span class="hljs-number">0</span>] = (<span class="hljs-type">byte</span>) ((s &lt;&lt; <span class="hljs-number">24</span>) &gt;&gt; <span class="hljs-number">24</span>);<br>bos.write(mybyte);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">WriteInt</span><span class="hljs-params">(ByteArrayOutputStream bos, <span class="hljs-type">int</span> n)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4</span>];<br>buf[<span class="hljs-number">3</span>] = (<span class="hljs-type">byte</span>) (n &gt;&gt; <span class="hljs-number">24</span>);<br>buf[<span class="hljs-number">2</span>] = (<span class="hljs-type">byte</span>) ((n &lt;&lt; <span class="hljs-number">8</span>) &gt;&gt; <span class="hljs-number">24</span>);<br>buf[<span class="hljs-number">1</span>] = (<span class="hljs-type">byte</span>) ((n &lt;&lt; <span class="hljs-number">16</span>) &gt;&gt; <span class="hljs-number">24</span>);<br>buf[<span class="hljs-number">0</span>] = (<span class="hljs-type">byte</span>) ((n &lt;&lt; <span class="hljs-number">24</span>) &gt;&gt; <span class="hljs-number">24</span>);<br>bos.write(buf);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">WriteChar</span><span class="hljs-params">(ByteArrayOutputStream bos, <span class="hljs-type">char</span>[] id)</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; id.length; i++) &#123;<br><span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> id[i];<br>bos.write(c);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/ichangemy/article/details/80351699">PCM音频流的认识</a><br><a href="https://blog.csdn.net/qq_25925973/article/details/90441386">java将pcm音频转换成wav格式</a></p>]]></content>
    
    
    <categories>
      
      <category>术说</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PCM</tag>
      
      <tag>语音流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 下挂载群晖 NAS 硬盘拓展空间（NFS）</title>
    <link href="/2024/03/17/Linux%20%E4%B8%8B%E6%8C%82%E8%BD%BD%E7%BE%A4%E6%99%96%20NAS%20%E7%A1%AC%E7%9B%98%E6%8B%93%E5%B1%95%E7%A9%BA%E9%97%B4%EF%BC%88NFS%EF%BC%89/"/>
    <url>/2024/03/17/Linux%20%E4%B8%8B%E6%8C%82%E8%BD%BD%E7%BE%A4%E6%99%96%20NAS%20%E7%A1%AC%E7%9B%98%E6%8B%93%E5%B1%95%E7%A9%BA%E9%97%B4%EF%BC%88NFS%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="在群晖-NAS-上配置"><a href="#在群晖-NAS-上配置" class="headerlink" title="在群晖 NAS 上配置"></a>在群晖 NAS 上配置</h2><h3 id="开启-NFS-服务"><a href="#开启-NFS-服务" class="headerlink" title="开启 NFS 服务"></a>开启 NFS 服务</h3><p>打开群晖的 <code>设置</code> - <code>文件服务</code> - <code>NFS</code>，把 NFS 服务勾选上，协议选最新即可。</p><h3 id="配置文件夹的-NFS-权限"><a href="#配置文件夹的-NFS-权限" class="headerlink" title="配置文件夹的 NFS 权限"></a>配置文件夹的 NFS 权限</h3><p>在 <code>设置</code> - <code>共享文件夹</code> 下，选择需要开启 NFS 的共享文件夹，点击 <code>编辑</code>，切换到 <code>NFS 权限</code> 的标签栏下，点击 <code>新增</code>，添加新的 NFS 规则。</p><p><code>服务器或IP地址</code>，填写需要访问群晖的服务器的 IP（比如我的服务器和群晖在同一局域网下，那么填我的服务器的内网 IP 192.168.1.2 即可）。勾选 <code>允许来自非特杈端口的连接</code> 和 <code>允许用户访问已装载了文件夹</code>，其他设置保持默认即可。</p><h2 id="在服务器上执行挂载"><a href="#在服务器上执行挂载" class="headerlink" title="在服务器上执行挂载"></a>在服务器上执行挂载</h2><p>首先，安装 nfs 服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt update<br>apt install nfs-common<br></code></pre></td></tr></table></figure><p>随后，在服务器上创建挂载的路径，比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mount -t nfs NAS的IP地址:共享文件夹的路径 /NFS客户端路径<br></code></pre></td></tr></table></figure><p>这里共享文件夹的路径可以在<code>File Station</code>右键要共享的文件夹，点<code>属性</code>，在<code>位置</code>里能看到路径信息</p><p>最后执行挂载命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mount -t nfs NAS的IP地址:共享文件夹的路径 /NFS客户端路径<br></code></pre></td></tr></table></figure><p>比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mount -t nfs 192.168.1.3:/volume1/music /DATA/nfs/music<br></code></pre></td></tr></table></figure><p>如果没有报错，使用 <code>df</code> 命令即可查看挂载情况。</p>]]></content>
    
    
    <categories>
      
      <category>术说</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nas</tag>
      
      <tag>Nfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenWrt安装腾讯云DDNS插件</title>
    <link href="/2024/03/17/OpenWrt%E5%AE%89%E8%A3%85%E8%85%BE%E8%AE%AF%E4%BA%91DDNS%E6%8F%92%E4%BB%B6/"/>
    <url>/2024/03/17/OpenWrt%E5%AE%89%E8%A3%85%E8%85%BE%E8%AE%AF%E4%BA%91DDNS%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="1-插件介绍"><a href="#1-插件介绍" class="headerlink" title="1.插件介绍"></a>1.插件介绍</h2><blockquote><p>OpenWRT TencentDDNS插件是一款腾讯云研发的，自动映射动态公网IP至用户指定的DNSPod域名解析记录的官方插件。</p></blockquote><table><thead><tr><th>标题</th><th>名称</th></tr></thead><tbody><tr><td>中文名称</td><td>腾讯云DDNS插件</td></tr><tr><td>英文名称</td><td>luci-app-tencentddns</td></tr><tr><td>最新版本</td><td>0.1.0 (2020.09.17)</td></tr><tr><td>适用平台</td><td><a href="https://github.com/coolsnowwolf/lede">Lean OpenWRT(opens new window)</a></td></tr><tr><td>适用产品</td><td><a href="https://www.dnspod.cn/">DNSPod(opens new window)</a></td></tr><tr><td>GitHub项目</td><td><a href="https://github.com/Tencent-Cloud-Plugins/tencentcloud-openwrt-plugin-ddns">tencentcloud-openwrt-plugin-ddns(opens new window)</a></td></tr><tr><td>gitee项目</td><td><a href="https://gitee.com/Tencent-Cloud-Plugins/tencentcloud-openwrt-plugin-ddns">tencentcloud-openwrt-plugin-ddns(opens new window)</a></td></tr><tr><td>主创团队</td><td>腾讯云中小企业产品中心（SMB Product Center of Tencent Cloud）</td></tr></tbody></table><h2 id="2-功能特性"><a href="#2-功能特性" class="headerlink" title="2.功能特性"></a>2.功能特性</h2><ul><li>可在安装了openwrt的软路由上，将运营商分配的家庭宽带公网IP动态关联到指定的DNSPod域名解析记录上。实现通过域名访问家庭内网服务的目的。</li></ul><blockquote><p>前提条件: 家用宽带必须要有公网IP，域名</p></blockquote><h2 id="3-安装指引"><a href="#3-安装指引" class="headerlink" title="3.安装指引"></a>3.安装指引</h2><h3 id="安装ipk包"><a href="#安装ipk包" class="headerlink" title="安装ipk包"></a>安装ipk包</h3><p>登录openwrt路由器,进入系统→软件包页面，将下方软件包的地址放入从网络安装的输入框中，点击确认完成安装。 ipk安装地址：<a href="https://openwrt-tencentddns-1301800460.cos.ap-guangzhou.myqcloud.com/luci-app-tencentddns_0.1.0-1_all.ipk">https://openwrt-tencentddns-1301800460.cos.ap-guangzhou.myqcloud.com/luci-app-tencentddns_0.1.0-1_all.ipk</a> [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-LMMvO1kF-1651889091707)(<a href="https://openapp.qq.com/docs/assets/img/ddns1.ed257ea9.png)]">https://openapp.qq.com/docs/assets/img/ddns1.ed257ea9.png)]</a></p><h2 id="4-使用指引"><a href="#4-使用指引" class="headerlink" title="4.使用指引"></a>4.使用指引</h2><h3 id="4-1-界面功能介绍"><a href="#4-1-界面功能介绍" class="headerlink" title="4.1 界面功能介绍"></a>4.1 界面功能介绍</h3><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-RYnauLsW-1651889091718)(<a href="https://openapp.qq.com/docs/assets/img/ddns2.293bb7ff.png)]">https://openapp.qq.com/docs/assets/img/ddns2.293bb7ff.png)]</a></p><blockquote><p>上图主要是配置DDNS插件的腾讯云参数，包括密钥ID、密钥Token、WAN-IP来源、主域名和子域名等</p></blockquote><h3 id="4-2-名词解释"><a href="#4-2-名词解释" class="headerlink" title="4.2 名词解释"></a>4.2 名词解释</h3><ul><li><strong>启用</strong>：是否开启腾讯云DDNS</li><li><strong>清除所有同名记录</strong>：如果一个域名有多个A解析记录，是否一并清除</li><li><strong>密钥ID</strong>：DNSPod后台密钥管理中的ID，获取地址：<a href="https://console.dnspod.cn/account/token">DNSPod密钥管理(opens new window)</a></li><li><strong>密钥Token</strong>：DNSPod后台密钥管理中的Token。获取地址：<a href="https://console.dnspod.cn/account/token">DNSPod密钥管理(opens new window)</a></li><li><strong>主域名</strong>：主域名，如: github.com</li><li><strong>子域名</strong>：子域名，如：www</li><li><strong>检查时间</strong>：后台对域名解析检查的时间间隔</li></ul><h3 id="4-3-DNSPod配置"><a href="#4-3-DNSPod配置" class="headerlink" title="4.3 DNSPod配置"></a>4.3 DNSPod配置</h3><p>登录腾讯云DNSPOD，账号中心-&gt; api密钥 -&gt; DNSPod Token 创建密钥，<code>ID</code>即为<code>密钥ID</code>，<code>Token</code>即为<code>密钥Token</code></p><p><img src="https://image.itweek.top/mweb/2024-03-25-17113494938282-17113494852272.png" alt="image-20220507094930662"></p>]]></content>
    
    
    <categories>
      
      <category>术说</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenWrt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Quartz分布式定时任务</title>
    <link href="/2023/03/20/Quartz%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <url>/2023/03/20/Quartz%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><p>项目需要执行定时任务,该类定时任务只需要实现类似Spring原生的@Scheudle注解的定时方法即可，无需考虑分片、刷新及重启，且因项目是多实例，所以需要考虑实现分布式，考察了目前开源的几款分布式定时任务产品</p><p>xxl-job  需要部署server端，考虑项目不需要依赖这么重的第三方的server，所以被pass</p><p>elastic-job-lite 这个需要的zk版本要3.6以上 公司已有的zk环境是3.4.5 所以不想再单独部署zk，所以也被pass</p><p>quartz 分布式定时任务是依靠数据库悲观锁的机制实现的，只需要依赖数据库，项目本身是有数据库存储依赖的，对项目的侵入性较小</p></blockquote><p>以下为改造过程</p><ol><li><p>引入maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.25<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>增加配置application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 定时任务配置</span><br><span class="hljs-attr">spring.quartz.job-store-type</span>=<span class="hljs-string">jdbc</span><br><span class="hljs-attr">spring.quartz.wait-for-jobs-to-complete-on-shutdown</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.quartz.overwrite-existing-jobs</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.quartz.startup-delay</span>=<span class="hljs-string">10S</span><br><span class="hljs-attr">spring.quartz.properties.org.quartz.scheduler.instanceName</span>=<span class="hljs-string">exampleInstanceName</span><br><span class="hljs-attr">spring.quartz.properties.org.quartz.scheduler.instanceId</span>=<span class="hljs-string">AUTO</span><br><span class="hljs-attr">spring.quartz.properties.org.quartz.jobStore.class</span>=<span class="hljs-string">org.quartz.impl.jdbcjobstore.JobStoreTX</span><br><span class="hljs-attr">spring.quartz.properties.org.quartz.jobStore.driverDelegateClass</span>=<span class="hljs-string">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span><br><span class="hljs-attr">spring.quartz.properties.org.quartz.jobStore.tablePrefix</span>=<span class="hljs-string">QRTZ_</span><br><span class="hljs-attr">spring.quartz.properties.org.quartz.jobStore.useProperties</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">spring.quartz.properties.org.quartz.jobStore.isClustered</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.quartz.properties.org.quartz.jobStore.clusterCheckinInterval</span>=<span class="hljs-string">5000</span><br><span class="hljs-attr">spring.quartz.properties.org.quartz.threadPool.class</span>=<span class="hljs-string">org.quartz.simpl.SimpleThreadPool</span><br><span class="hljs-attr">spring.quartz.properties.org.quartz.threadPool.threadCount</span>=<span class="hljs-string">10</span><br><span class="hljs-attr">spring.quartz.properties.org.quartz.threadPool.threadPriority</span>=<span class="hljs-string">5</span><br><span class="hljs-attr">spring.quartz.properties.org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure></li><li><p>执行sql</p><blockquote><p>项目中存在数据库的连接配置,存在spring-boot-starter-jdbc依赖</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<br># <span class="hljs-keyword">In</span> your Quartz properties file, you<span class="hljs-string">&#x27;ll need to set</span><br><span class="hljs-string"># org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span><br><span class="hljs-string">#</span><br><span class="hljs-string">#</span><br><span class="hljs-string"># By: Ron Cordell - roncordell</span><br><span class="hljs-string">#  I didn&#x27;</span>t see this anywhere, so I thought I<span class="hljs-string">&#x27;d post it here. This is the script from Quartz to create the tables in a MySQL database, modified to use INNODB instead of MYISAM.</span><br><span class="hljs-string"></span><br><span class="hljs-string">DROP TABLE IF EXISTS QRTZ_FIRED_TRIGGERS;</span><br><span class="hljs-string">DROP TABLE IF EXISTS QRTZ_PAUSED_TRIGGER_GRPS;</span><br><span class="hljs-string">DROP TABLE IF EXISTS QRTZ_SCHEDULER_STATE;</span><br><span class="hljs-string">DROP TABLE IF EXISTS QRTZ_LOCKS;</span><br><span class="hljs-string">DROP TABLE IF EXISTS QRTZ_SIMPLE_TRIGGERS;</span><br><span class="hljs-string">DROP TABLE IF EXISTS QRTZ_SIMPROP_TRIGGERS;</span><br><span class="hljs-string">DROP TABLE IF EXISTS QRTZ_CRON_TRIGGERS;</span><br><span class="hljs-string">DROP TABLE IF EXISTS QRTZ_BLOB_TRIGGERS;</span><br><span class="hljs-string">DROP TABLE IF EXISTS QRTZ_TRIGGERS;</span><br><span class="hljs-string">DROP TABLE IF EXISTS QRTZ_JOB_DETAILS;</span><br><span class="hljs-string">DROP TABLE IF EXISTS QRTZ_CALENDARS;</span><br><span class="hljs-string"></span><br><span class="hljs-string">CREATE TABLE QRTZ_JOB_DETAILS(</span><br><span class="hljs-string">SCHED_NAME VARCHAR(120) NOT NULL,</span><br><span class="hljs-string">JOB_NAME VARCHAR(190) NOT NULL,</span><br><span class="hljs-string">JOB_GROUP VARCHAR(190) NOT NULL,</span><br><span class="hljs-string">DESCRIPTION VARCHAR(250) NULL,</span><br><span class="hljs-string">JOB_CLASS_NAME VARCHAR(250) NOT NULL,</span><br><span class="hljs-string">IS_DURABLE VARCHAR(1) NOT NULL,</span><br><span class="hljs-string">IS_NONCONCURRENT VARCHAR(1) NOT NULL,</span><br><span class="hljs-string">IS_UPDATE_DATA VARCHAR(1) NOT NULL,</span><br><span class="hljs-string">REQUESTS_RECOVERY VARCHAR(1) NOT NULL,</span><br><span class="hljs-string">JOB_DATA BLOB NULL,</span><br><span class="hljs-string">PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP))</span><br><span class="hljs-string">ENGINE=InnoDB;</span><br><span class="hljs-string"></span><br><span class="hljs-string">CREATE TABLE QRTZ_TRIGGERS (</span><br><span class="hljs-string">SCHED_NAME VARCHAR(120) NOT NULL,</span><br><span class="hljs-string">TRIGGER_NAME VARCHAR(190) NOT NULL,</span><br><span class="hljs-string">TRIGGER_GROUP VARCHAR(190) NOT NULL,</span><br><span class="hljs-string">JOB_NAME VARCHAR(190) NOT NULL,</span><br><span class="hljs-string">JOB_GROUP VARCHAR(190) NOT NULL,</span><br><span class="hljs-string">DESCRIPTION VARCHAR(250) NULL,</span><br><span class="hljs-string">NEXT_FIRE_TIME BIGINT(13) NULL,</span><br><span class="hljs-string">PREV_FIRE_TIME BIGINT(13) NULL,</span><br><span class="hljs-string">PRIORITY INTEGER NULL,</span><br><span class="hljs-string">TRIGGER_STATE VARCHAR(16) NOT NULL,</span><br><span class="hljs-string">TRIGGER_TYPE VARCHAR(8) NOT NULL,</span><br><span class="hljs-string">START_TIME BIGINT(13) NOT NULL,</span><br><span class="hljs-string">END_TIME BIGINT(13) NULL,</span><br><span class="hljs-string">CALENDAR_NAME VARCHAR(190) NULL,</span><br><span class="hljs-string">MISFIRE_INSTR SMALLINT(2) NULL,</span><br><span class="hljs-string">JOB_DATA BLOB NULL,</span><br><span class="hljs-string">PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="hljs-string">FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)</span><br><span class="hljs-string">REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP))</span><br><span class="hljs-string">ENGINE=InnoDB;</span><br><span class="hljs-string"></span><br><span class="hljs-string">CREATE TABLE QRTZ_SIMPLE_TRIGGERS (</span><br><span class="hljs-string">SCHED_NAME VARCHAR(120) NOT NULL,</span><br><span class="hljs-string">TRIGGER_NAME VARCHAR(190) NOT NULL,</span><br><span class="hljs-string">TRIGGER_GROUP VARCHAR(190) NOT NULL,</span><br><span class="hljs-string">REPEAT_COUNT BIGINT(7) NOT NULL,</span><br><span class="hljs-string">REPEAT_INTERVAL BIGINT(12) NOT NULL,</span><br><span class="hljs-string">TIMES_TRIGGERED BIGINT(10) NOT NULL,</span><br><span class="hljs-string">PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="hljs-string">FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="hljs-string">REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))</span><br><span class="hljs-string">ENGINE=InnoDB;</span><br><span class="hljs-string"></span><br><span class="hljs-string">CREATE TABLE QRTZ_CRON_TRIGGERS (</span><br><span class="hljs-string">SCHED_NAME VARCHAR(120) NOT NULL,</span><br><span class="hljs-string">TRIGGER_NAME VARCHAR(190) NOT NULL,</span><br><span class="hljs-string">TRIGGER_GROUP VARCHAR(190) NOT NULL,</span><br><span class="hljs-string">CRON_EXPRESSION VARCHAR(120) NOT NULL,</span><br><span class="hljs-string">TIME_ZONE_ID VARCHAR(80),</span><br><span class="hljs-string">PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="hljs-string">FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="hljs-string">REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))</span><br><span class="hljs-string">ENGINE=InnoDB;</span><br><span class="hljs-string"></span><br><span class="hljs-string">CREATE TABLE QRTZ_SIMPROP_TRIGGERS</span><br><span class="hljs-string">  (</span><br><span class="hljs-string">    SCHED_NAME VARCHAR(120) NOT NULL,</span><br><span class="hljs-string">    TRIGGER_NAME VARCHAR(190) NOT NULL,</span><br><span class="hljs-string">    TRIGGER_GROUP VARCHAR(190) NOT NULL,</span><br><span class="hljs-string">    STR_PROP_1 VARCHAR(512) NULL,</span><br><span class="hljs-string">    STR_PROP_2 VARCHAR(512) NULL,</span><br><span class="hljs-string">    STR_PROP_3 VARCHAR(512) NULL,</span><br><span class="hljs-string">    INT_PROP_1 INT NULL,</span><br><span class="hljs-string">    INT_PROP_2 INT NULL,</span><br><span class="hljs-string">    LONG_PROP_1 BIGINT NULL,</span><br><span class="hljs-string">    LONG_PROP_2 BIGINT NULL,</span><br><span class="hljs-string">    DEC_PROP_1 NUMERIC(13,4) NULL,</span><br><span class="hljs-string">    DEC_PROP_2 NUMERIC(13,4) NULL,</span><br><span class="hljs-string">    BOOL_PROP_1 VARCHAR(1) NULL,</span><br><span class="hljs-string">    BOOL_PROP_2 VARCHAR(1) NULL,</span><br><span class="hljs-string">    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="hljs-string">    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="hljs-string">    REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))</span><br><span class="hljs-string">ENGINE=InnoDB;</span><br><span class="hljs-string"></span><br><span class="hljs-string">CREATE TABLE QRTZ_BLOB_TRIGGERS (</span><br><span class="hljs-string">SCHED_NAME VARCHAR(120) NOT NULL,</span><br><span class="hljs-string">TRIGGER_NAME VARCHAR(190) NOT NULL,</span><br><span class="hljs-string">TRIGGER_GROUP VARCHAR(190) NOT NULL,</span><br><span class="hljs-string">BLOB_DATA BLOB NULL,</span><br><span class="hljs-string">PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="hljs-string">INDEX (SCHED_NAME,TRIGGER_NAME, TRIGGER_GROUP),</span><br><span class="hljs-string">FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="hljs-string">REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))</span><br><span class="hljs-string">ENGINE=InnoDB;</span><br><span class="hljs-string"></span><br><span class="hljs-string">CREATE TABLE QRTZ_CALENDARS (</span><br><span class="hljs-string">SCHED_NAME VARCHAR(120) NOT NULL,</span><br><span class="hljs-string">CALENDAR_NAME VARCHAR(190) NOT NULL,</span><br><span class="hljs-string">CALENDAR BLOB NOT NULL,</span><br><span class="hljs-string">PRIMARY KEY (SCHED_NAME,CALENDAR_NAME))</span><br><span class="hljs-string">ENGINE=InnoDB;</span><br><span class="hljs-string"></span><br><span class="hljs-string">CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS (</span><br><span class="hljs-string">SCHED_NAME VARCHAR(120) NOT NULL,</span><br><span class="hljs-string">TRIGGER_GROUP VARCHAR(190) NOT NULL,</span><br><span class="hljs-string">PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP))</span><br><span class="hljs-string">ENGINE=InnoDB;</span><br><span class="hljs-string"></span><br><span class="hljs-string">CREATE TABLE QRTZ_FIRED_TRIGGERS (</span><br><span class="hljs-string">SCHED_NAME VARCHAR(120) NOT NULL,</span><br><span class="hljs-string">ENTRY_ID VARCHAR(95) NOT NULL,</span><br><span class="hljs-string">TRIGGER_NAME VARCHAR(190) NOT NULL,</span><br><span class="hljs-string">TRIGGER_GROUP VARCHAR(190) NOT NULL,</span><br><span class="hljs-string">INSTANCE_NAME VARCHAR(190) NOT NULL,</span><br><span class="hljs-string">FIRED_TIME BIGINT(13) NOT NULL,</span><br><span class="hljs-string">SCHED_TIME BIGINT(13) NOT NULL,</span><br><span class="hljs-string">PRIORITY INTEGER NOT NULL,</span><br><span class="hljs-string">STATE VARCHAR(16) NOT NULL,</span><br><span class="hljs-string">JOB_NAME VARCHAR(190) NULL,</span><br><span class="hljs-string">JOB_GROUP VARCHAR(190) NULL,</span><br><span class="hljs-string">IS_NONCONCURRENT VARCHAR(1) NULL,</span><br><span class="hljs-string">REQUESTS_RECOVERY VARCHAR(1) NULL,</span><br><span class="hljs-string">PRIMARY KEY (SCHED_NAME,ENTRY_ID))</span><br><span class="hljs-string">ENGINE=InnoDB;</span><br><span class="hljs-string"></span><br><span class="hljs-string">CREATE TABLE QRTZ_SCHEDULER_STATE (</span><br><span class="hljs-string">SCHED_NAME VARCHAR(120) NOT NULL,</span><br><span class="hljs-string">INSTANCE_NAME VARCHAR(190) NOT NULL,</span><br><span class="hljs-string">LAST_CHECKIN_TIME BIGINT(13) NOT NULL,</span><br><span class="hljs-string">CHECKIN_INTERVAL BIGINT(13) NOT NULL,</span><br><span class="hljs-string">PRIMARY KEY (SCHED_NAME,INSTANCE_NAME))</span><br><span class="hljs-string">ENGINE=InnoDB;</span><br><span class="hljs-string"></span><br><span class="hljs-string">CREATE TABLE QRTZ_LOCKS (</span><br><span class="hljs-string">SCHED_NAME VARCHAR(120) NOT NULL,</span><br><span class="hljs-string">LOCK_NAME VARCHAR(40) NOT NULL,</span><br><span class="hljs-string">PRIMARY KEY (SCHED_NAME,LOCK_NAME))</span><br><span class="hljs-string">ENGINE=InnoDB;</span><br><span class="hljs-string"></span><br><span class="hljs-string">CREATE INDEX IDX_QRTZ_J_REQ_RECOVERY ON QRTZ_JOB_DETAILS(SCHED_NAME,REQUESTS_RECOVERY);</span><br><span class="hljs-string">CREATE INDEX IDX_QRTZ_J_GRP ON QRTZ_JOB_DETAILS(SCHED_NAME,JOB_GROUP);</span><br><span class="hljs-string"></span><br><span class="hljs-string">CREATE INDEX IDX_QRTZ_T_J ON QRTZ_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);</span><br><span class="hljs-string">CREATE INDEX IDX_QRTZ_T_JG ON QRTZ_TRIGGERS(SCHED_NAME,JOB_GROUP);</span><br><span class="hljs-string">CREATE INDEX IDX_QRTZ_T_C ON QRTZ_TRIGGERS(SCHED_NAME,CALENDAR_NAME);</span><br><span class="hljs-string">CREATE INDEX IDX_QRTZ_T_G ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);</span><br><span class="hljs-string">CREATE INDEX IDX_QRTZ_T_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE);</span><br><span class="hljs-string">CREATE INDEX IDX_QRTZ_T_N_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE);</span><br><span class="hljs-string">CREATE INDEX IDX_QRTZ_T_N_G_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE);</span><br><span class="hljs-string">CREATE INDEX IDX_QRTZ_T_NEXT_FIRE_TIME ON QRTZ_TRIGGERS(SCHED_NAME,NEXT_FIRE_TIME);</span><br><span class="hljs-string">CREATE INDEX IDX_QRTZ_T_NFT_ST ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME);</span><br><span class="hljs-string">CREATE INDEX IDX_QRTZ_T_NFT_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME);</span><br><span class="hljs-string">CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE);</span><br><span class="hljs-string">CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE_GRP ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE);</span><br><span class="hljs-string"></span><br><span class="hljs-string">CREATE INDEX IDX_QRTZ_FT_TRIG_INST_NAME ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME);</span><br><span class="hljs-string">CREATE INDEX IDX_QRTZ_FT_INST_JOB_REQ_RCVRY ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY);</span><br><span class="hljs-string">CREATE INDEX IDX_QRTZ_FT_J_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);</span><br><span class="hljs-string">CREATE INDEX IDX_QRTZ_FT_JG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_GROUP);</span><br><span class="hljs-string">CREATE INDEX IDX_QRTZ_FT_T_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP);</span><br><span class="hljs-string">CREATE INDEX IDX_QRTZ_FT_TG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);</span><br><span class="hljs-string"></span><br><span class="hljs-string">commit;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure></li><li><p>以下是代码列表清单</p></li></ol><blockquote><p>实现逻辑：</p><p>1&gt;  ScheduleJobInit 初始化时加载所有AbstractJob 的子类</p><p>2&gt; 获取子类的 beanName ，及ScheduleTag注解注解的方法名称methodName,及注解的cron()方法</p><p>3&gt; 根据beanName+methodName 生产jobId</p><p>4&gt; 如果外部有 beanName+methodName+cron 配置取外部配置,没值取注解的cron()值</p><p>5&gt; 具体需要定时执行的类和方法 需满足 在spring容器里、实现AbstractJob 接口、方法上加上ScheduleTag(cron&#x3D;””) 注解信息即可</p></blockquote><ul><li><p><strong>ScheduleJobEntity</strong> job信息类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduleJobEntity</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">JOB_PARAM_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;JOB_PARAM_KEY&quot;</span>;<br>    <span class="hljs-keyword">private</span> String jobId;<br>    <span class="hljs-keyword">private</span> String beanName;<br>    <span class="hljs-keyword">private</span> String methodName;<br>    <span class="hljs-keyword">private</span> String params;<br>    <span class="hljs-keyword">private</span> String cronExpression;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getJobId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> StrUtil.join(<span class="hljs-string">&quot;_&quot;</span>, beanName, methodName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>ScheduleUtils</strong> schedule工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定时任务工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduleUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">JOB_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;job_&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">JOB_PARAMS_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;params&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">JOB_CRON_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cron&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取触发器key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TriggerKey <span class="hljs-title function_">getTriggerKey</span><span class="hljs-params">(String jobId)</span> &#123;<br>        <span class="hljs-keyword">return</span> TriggerKey.triggerKey(JOB_NAME + jobId);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取jobKey</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JobKey <span class="hljs-title function_">getJobKey</span><span class="hljs-params">(String jobId)</span> &#123;<br>        <span class="hljs-keyword">return</span> JobKey.jobKey(JOB_NAME + jobId);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initJob</span><span class="hljs-params">(Scheduler scheduler, Class jobClass, Map&lt;String, String&gt; properties)</span> &#123;<br>        <span class="hljs-type">ScheduleJobEntity</span> <span class="hljs-variable">scheduleJob</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScheduleJobEntity</span>();<br>        scheduleJob.setBeanName(StringUtils.uncapitalize(jobClass.getSimpleName()));<br>        Method[] methods = MethodUtils.getMethodsWithAnnotation(jobClass, ScheduleTag.class);<br>        <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>            <span class="hljs-type">ScheduleTag</span> <span class="hljs-variable">scheduleTag</span> <span class="hljs-operator">=</span> method.getAnnotation(ScheduleTag.class);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cron</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">if</span> (scheduleTag != <span class="hljs-literal">null</span>) &#123;<br>                params = scheduleTag.params();<br>                cron = scheduleTag.corn();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (CollectionUtil.isNotEmpty(properties)) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">paramsDynamic</span> <span class="hljs-operator">=</span> properties.get(joinKey(scheduleJob.getBeanName(), method.getName(), JOB_PARAMS_NAME));<br>                <span class="hljs-type">String</span> <span class="hljs-variable">cronDynamic</span> <span class="hljs-operator">=</span> properties.get(joinKey(scheduleJob.getBeanName(), method.getName(), JOB_CRON_NAME));<br>                <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(paramsDynamic)) &#123;<br>                    params = paramsDynamic;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(cronDynamic)) &#123;<br>                    cron = cronDynamic;<br>                &#125;<br>            &#125;<br>            scheduleJob.setMethodName(method.getName());<br>            scheduleJob.setParams(params);<br>            scheduleJob.setCronExpression(cron);<br>            <span class="hljs-type">CronTrigger</span> <span class="hljs-variable">cronTrigger</span> <span class="hljs-operator">=</span> ScheduleUtils.getCronTrigger(scheduler, scheduleJob.getJobId());<br>            <span class="hljs-keyword">if</span> (cronTrigger == <span class="hljs-literal">null</span>) &#123;<br>                createScheduleJob(scheduler, scheduleJob);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                updateScheduleJob(scheduler, scheduleJob);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">joinKey</span><span class="hljs-params">(String beanName, String methodName, String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> StrUtil.join(<span class="hljs-string">&quot;_&quot;</span>, beanName, methodName, key);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取表达式触发器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CronTrigger <span class="hljs-title function_">getCronTrigger</span><span class="hljs-params">(Scheduler scheduler, String jobId)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> (CronTrigger) scheduler.getTrigger(getTriggerKey(jobId));<br>        &#125; <span class="hljs-keyword">catch</span> (SchedulerException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QeteshException</span>(e, <span class="hljs-string">&quot;获取定时任务CronTrigger出现异常&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建定时任务</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createScheduleJob</span><span class="hljs-params">(Scheduler scheduler, ScheduleJobEntity scheduleJob)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 构建job信息</span><br>            <span class="hljs-type">JobDetail</span> <span class="hljs-variable">jobDetail</span> <span class="hljs-operator">=</span> JobBuilder.newJob(ScheduleJob.class).withIdentity(getJobKey(scheduleJob.getJobId())).build();<br><br>            <span class="hljs-comment">// 表达式调度构建器</span><br>            <span class="hljs-type">CronScheduleBuilder</span> <span class="hljs-variable">scheduleBuilder</span> <span class="hljs-operator">=</span> CronScheduleBuilder.cronSchedule(scheduleJob.getCronExpression())<br>                    .withMisfireHandlingInstructionDoNothing();<br><br>            <span class="hljs-comment">// 按新的cronExpression表达式构建一个新的trigger</span><br>            <span class="hljs-type">CronTrigger</span> <span class="hljs-variable">trigger</span> <span class="hljs-operator">=</span> TriggerBuilder.newTrigger().withIdentity(getTriggerKey(scheduleJob.getJobId())).withSchedule(scheduleBuilder).build();<br><br>            <span class="hljs-comment">// 放入参数，运行时的方法可以获取</span><br>            jobDetail.getJobDataMap().put(ScheduleJobEntity.JOB_PARAM_KEY, JSONUtil.toJsonStr(scheduleJob));<br><br>            scheduler.scheduleJob(jobDetail, trigger);<br><br>        &#125; <span class="hljs-keyword">catch</span> (SchedulerException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QeteshException</span>(e, <span class="hljs-string">&quot;创建定时任务失败&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新定时任务</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateScheduleJob</span><span class="hljs-params">(Scheduler scheduler, ScheduleJobEntity scheduleJob)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">TriggerKey</span> <span class="hljs-variable">triggerKey</span> <span class="hljs-operator">=</span> getTriggerKey(scheduleJob.getJobId());<br><br>            <span class="hljs-comment">// 表达式调度构建器</span><br>            <span class="hljs-type">CronScheduleBuilder</span> <span class="hljs-variable">scheduleBuilder</span> <span class="hljs-operator">=</span> CronScheduleBuilder.cronSchedule(scheduleJob.getCronExpression())<br>                    .withMisfireHandlingInstructionDoNothing();<br><br>            <span class="hljs-type">CronTrigger</span> <span class="hljs-variable">trigger</span> <span class="hljs-operator">=</span> getCronTrigger(scheduler, scheduleJob.getJobId());<br><br>            <span class="hljs-comment">// 按新的cronExpression表达式重新构建trigger</span><br>            trigger = trigger.getTriggerBuilder().withIdentity(triggerKey).withSchedule(scheduleBuilder).build();<br><br>            <span class="hljs-comment">// 参数</span><br>            trigger.getJobDataMap().put(ScheduleJobEntity.JOB_PARAM_KEY, JSONUtil.toJsonStr(scheduleJob));<br><br>            scheduler.rescheduleJob(triggerKey, trigger);<br><br><br>        &#125; <span class="hljs-keyword">catch</span> (SchedulerException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QeteshException</span>(e, <span class="hljs-string">&quot;更新定时任务失败&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>ScheduleRunnable</strong> 具体任务执行反射线程类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 执行定时任务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduleRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object target;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Method method;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String params;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ScheduleRunnable</span><span class="hljs-params">(String beanName, String methodName, String params)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, SecurityException &#123;<br>        <span class="hljs-built_in">this</span>.target = SpringContextHolder.getBean(beanName);<br>        <span class="hljs-built_in">this</span>.params = params;<br>        <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(params)) &#123;<br>            <span class="hljs-built_in">this</span>.method = target.getClass().getDeclaredMethod(methodName, String.class);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.method = target.getClass().getDeclaredMethod(methodName);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ReflectionUtils.makeAccessible(method);<br>            <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(params)) &#123;<br>                method.invoke(target, params);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                method.invoke(target);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QeteshException</span>(e, <span class="hljs-string">&quot;执行定时任务失败&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>ScheduleJob</strong> job类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定时任务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduleJob</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">QuartzJobBean</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">executeInternal</span><span class="hljs-params">(JobExecutionContext context)</span> <span class="hljs-keyword">throws</span> JobExecutionException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonJob</span> <span class="hljs-operator">=</span> context.getMergedJobDataMap().getString(ScheduleJobEntity.JOB_PARAM_KEY);<br>        <span class="hljs-type">ScheduleJobEntity</span> <span class="hljs-variable">scheduleJob</span> <span class="hljs-operator">=</span> JSONUtil.toBean(jsonJob, ScheduleJobEntity.class);<br>        <span class="hljs-comment">// 任务开始时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 执行任务</span><br>            log.info(<span class="hljs-string">&quot;任务准备执行，任务ID：&quot;</span> + scheduleJob.getJobId());<br>            <span class="hljs-type">ScheduleRunnable</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScheduleRunnable</span>(scheduleJob.getBeanName(),<br>                    scheduleJob.getMethodName(), scheduleJob.getParams());<br>            Future&lt;?&gt; future = service.submit(task);<br>            future.get();<br>            <span class="hljs-comment">// 任务执行总时长</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">times</span> <span class="hljs-operator">=</span> System.currentTimeMillis() - startTime;<br>            log.info(<span class="hljs-string">&quot;任务执行完毕，任务ID：&quot;</span> + scheduleJob.getJobId() + <span class="hljs-string">&quot;  总共耗时：&quot;</span> + times + <span class="hljs-string">&quot;毫秒&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;任务执行失败，任务ID：&quot;</span> + scheduleJob.getJobId(), e);<br>            <span class="hljs-comment">// 任务执行总时长</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">times</span> <span class="hljs-operator">=</span> System.currentTimeMillis() - startTime;<br>            log.info(<span class="hljs-string">&quot;任务执行完毕，任务ID：&quot;</span> + scheduleJob.getJobId() + <span class="hljs-string">&quot;  总共耗时：&quot;</span> + times + <span class="hljs-string">&quot;毫秒&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>ScheduleTag</strong> 注解类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> ScheduleTag &#123;<br><br>    String <span class="hljs-title function_">corn</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>    String <span class="hljs-title function_">params</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>AbstractJob</strong> job接口类,如果需要定时执行的方法需要继承该接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AbstractJob</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>ScheduleJobInit</strong> 初始化器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@RequiredArgsConstructor(onConstructor = @__(@Autowired))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduleJobInit</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationContextAware</span>, InitializingBean &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Scheduler scheduler;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> JobConfig jobConfig;<br>    <span class="hljs-keyword">private</span> ApplicationContext applicationContext;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApplicationContext</span><span class="hljs-params">(ApplicationContext applicationContext)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-built_in">this</span>.applicationContext = applicationContext;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Collection&lt;AbstractJob&gt; jobList = applicationContext.getBeansOfType(AbstractJob.class).values();<br>        <span class="hljs-keyword">if</span> (CollectionUtil.isNotEmpty(jobList)) &#123;<br>            jobList.forEach(job -&gt; ScheduleUtils.initJob(scheduler, job.getClass(), jobConfig.getProperties()));<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>SimpleJob</strong>  简单示例job ,必须在spring容器内</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@RequiredArgsConstructor(onConstructor = @__(@Autowired))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleJob</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AbstractJob</span> &#123;<br><br>    <span class="hljs-comment">// 每5秒执行一次</span><br>    <span class="hljs-meta">@ScheduleTag(corn = &quot;*/5 * * * * ?&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;test start...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>这里如果需要在配置文件里配置<code>cron</code>，需要增加如下配置<br>    <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">aicc.job.properties.simpleJob_test_cron</span>=<span class="hljs-string">0 0/1 * * * ?</span><br></code></pre></td></tr></table></figure></p><p>规则如下：</p><blockquote><p>aicc.job.properties.<code>beanName(类名首字母小写)</code>.<code>methodName(方法名)</code>.cron  </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>术说</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Quartz</tag>
      
      <tag>分布式定时任务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生产环境Sentinel改造实践（二）：规则管理推送改造</title>
    <link href="/2023/01/11/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83Sentinel%E6%94%B9%E9%80%A0%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%A7%84%E5%88%99%E7%AE%A1%E7%90%86%E6%8E%A8%E9%80%81%E6%94%B9%E9%80%A0/"/>
    <url>/2023/01/11/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83Sentinel%E6%94%B9%E9%80%A0%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%A7%84%E5%88%99%E7%AE%A1%E7%90%86%E6%8E%A8%E9%80%81%E6%94%B9%E9%80%A0/</url>
    
    <content type="html"><![CDATA[<p>前文介绍了Sentinel相关的核心概念，本文开始动手对规则管理推送进行改造。</p><p>这里挑选<code>流控规则</code>模式改造为示例</p><h4 id="Sentinel-Dashboard-改造"><a href="#Sentinel-Dashboard-改造" class="headerlink" title="Sentinel Dashboard 改造"></a>Sentinel Dashboard 改造</h4><ol><li><p>在<code>com.alibaba.csp.sentinel.dashboard.rule.nacos</code>新建<code>NacosConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alibaba.csp.sentinel.dashboard.rule.nacos;<br><br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.FlowRuleEntity;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.datasource.Converter;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.nacos.api.PropertyKeyConst;<br><span class="hljs-keyword">import</span> com.alibaba.nacos.api.config.ConfigFactory;<br><span class="hljs-keyword">import</span> com.alibaba.nacos.api.config.ConfigService;<br><span class="hljs-keyword">import</span> lombok.Getter;<br><span class="hljs-keyword">import</span> lombok.Setter;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@wiki</span> https://github.com/eacdy/Sentinel-Dashboard-Nacos</span><br><span class="hljs-comment"> * add by tam</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NacosConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Converter&lt;List&lt;FlowRuleEntity&gt;, String&gt; <span class="hljs-title function_">flowRuleEntityEncoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> JSON::toJSONString;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Converter&lt;String, List&lt;FlowRuleEntity&gt;&gt; <span class="hljs-title function_">flowRuleEntityDecoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> s -&gt; JSON.parseArray(s, FlowRuleEntity.class);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ConfigService <span class="hljs-title function_">nacosConfigService</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">NacosProperties</span> <span class="hljs-variable">nacosProperties</span> <span class="hljs-operator">=</span> nacosProperties();<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.put(PropertyKeyConst.SERVER_ADDR, nacosProperties.getServerAddr());<br>        <span class="hljs-keyword">if</span> (!nacosProperties.getNamespace().isEmpty()) &#123;<br>            properties.put(PropertyKeyConst.NAMESPACE, nacosProperties.getNamespace());<br>        &#125;<br>        <span class="hljs-keyword">return</span> ConfigFactory.createConfigService(properties);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.cloud.sentinel.datasource.nacos&quot;)</span><br>    <span class="hljs-keyword">public</span> NacosProperties <span class="hljs-title function_">nacosProperties</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NacosProperties</span>();<br>    &#125;<br><br><br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-meta">@Setter</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NacosProperties</span> &#123;<br>        <span class="hljs-keyword">private</span> String serverAddr;<br>        <span class="hljs-keyword">private</span> String namespace;<br>        <span class="hljs-keyword">private</span> String groupId;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里主要接收三个参数 <code>serverAddr</code>: nacos服务器地址，<code>namespace</code>：nacos命名空间,<code>groupId</code>：nacos分组</p><p>在<code>application.properties</code>里新增配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.cloud.sentinel.datasource.nacos.server-addr</span>=<span class="hljs-string">172.16.1.20:8848</span><br><span class="hljs-attr">spring.cloud.sentinel.datasource.nacos.groupId</span>=<span class="hljs-string">DEFAULT_GROUP</span><br><span class="hljs-attr">spring.cloud.sentinel.datasource.nacos.namespace</span>=<span class="hljs-string">wuyan_local</span><br></code></pre></td></tr></table></figure></li><li><p>同级目录下新增<code>NacosConfigUtil.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alibaba.csp.sentinel.dashboard.rule.nacos;<br><br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.dashboard.util.JSONUtils;<br><span class="hljs-keyword">import</span> com.alibaba.nacos.api.config.ConfigService;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.RuleEntity;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.slots.block.Rule;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.util.AssertUtil;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.util.StringUtil;<br><span class="hljs-keyword">import</span> com.alibaba.nacos.api.exception.NacosException;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@wiki</span> https://github.com/eacdy/Sentinel-Dashboard-Nacos</span><br><span class="hljs-comment"> * add by tam</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NacosConfigUtil</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> NacosConfig.NacosProperties nacosProperties;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FLOW_DATA_ID_POSTFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;-flow-rules&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEGRADE_DATA_ID_POSTFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;-degrade-rules&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SYSTEM_DATA_ID_POSTFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;-system-rules&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PARAM_FLOW_DATA_ID_POSTFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;-param-flow-rules&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">AUTHORITY_DATA_ID_POSTFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;-authority-rules&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">GATEWAY_FLOW_DATA_ID_POSTFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;-gateway-flow-rules&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">GATEWAY_API_DATA_ID_POSTFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;-gateway-api-rules&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DASHBOARD_POSTFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;-dashboard&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CLUSTER_MAP_DATA_ID_POSTFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;-cluster-map&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * cc for `cluster-client`</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CLIENT_CONFIG_DATA_ID_POSTFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;-cc-config&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * cs for `cluster-server`</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SERVER_TRANSPORT_CONFIG_DATA_ID_POSTFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;-cs-transport-config&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SERVER_FLOW_CONFIG_DATA_ID_POSTFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;-cs-flow-config&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SERVER_NAMESPACE_SET_DATA_ID_POSTFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;-cs-namespace-set&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将规则序列化成JSON文本，存储到Nacos server中</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> configService nacos config service</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> app           应用名称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> postfix       规则后缀 eg.NacosConfigUtil.FLOW_DATA_ID_POSTFIX</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rules         规则对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> NacosException 异常</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRuleStringToNacos</span><span class="hljs-params">(ConfigService configService, String app, String postfix, List&lt;T&gt; rules)</span> <span class="hljs-keyword">throws</span> NacosException &#123;<br>        AssertUtil.notEmpty(app, <span class="hljs-string">&quot;app name cannot be empty&quot;</span>);<br>        <span class="hljs-keyword">if</span> (rules == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        List&lt;Rule&gt; ruleForApp = rules.stream()<br>                .map(rule -&gt; &#123;<br>                    <span class="hljs-type">RuleEntity</span> <span class="hljs-variable">rule1</span> <span class="hljs-operator">=</span> (RuleEntity) rule;<br>                    <span class="hljs-comment">//System.out.println(rule1.getClass());</span><br>                    <span class="hljs-type">Rule</span> <span class="hljs-variable">rule2</span> <span class="hljs-operator">=</span> rule1.toRule();<br>                    <span class="hljs-comment">//System.out.println(rule2.getClass());</span><br>                    <span class="hljs-keyword">return</span> rule2;<br>                &#125;)<br>                .collect(Collectors.toList());<br><br>        <span class="hljs-comment">// 存储，给微服务使用</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">dataId</span> <span class="hljs-operator">=</span> genDataId(app, postfix);<br>        configService.publishConfig(<br>                dataId,<br>                nacosProperties.getGroupId(),<br>                JSON.toJSONString(ruleForApp)<br>        );<br><br>        <span class="hljs-comment">// 存储，给控制台使用</span><br>        configService.publishConfig(<br>                dataId + DASHBOARD_POSTFIX,<br>                nacosProperties.getGroupId(),<br>                JSONUtils.toJSONString(rules)<br>        );<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从Nacos server中查询响应规则，并将其反序列化成对应Rule实体</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> configService nacos config service</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> appName       应用名称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> postfix       规则后缀 eg.NacosConfigUtil.FLOW_DATA_ID_POSTFIX</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz         类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;           泛型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 规则对象列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> NacosException 异常</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">getRuleEntitiesFromNacos</span><span class="hljs-params">(ConfigService configService, String appName, String postfix, Class&lt;T&gt; clazz)</span> <span class="hljs-keyword">throws</span> NacosException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">rules</span> <span class="hljs-operator">=</span> configService.getConfig(<br>                genDataId(appName, postfix) + DASHBOARD_POSTFIX,<br>                <span class="hljs-comment">//genDataId(appName, postfix),</span><br>                nacosProperties.getGroupId(),<br>                <span class="hljs-number">3000</span><br>        );<br>        <span class="hljs-keyword">if</span> (StringUtil.isEmpty(rules)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        &#125;<br>        <span class="hljs-keyword">return</span> JSONUtils.parseObject(clazz, rules);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">genDataId</span><span class="hljs-params">(String appName, String postfix)</span> &#123;<br>        <span class="hljs-keyword">return</span> appName + postfix;<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意这里的<code>dataId</code>完整的为 【appId（即客户端spring.application.name配置应用名）+ <code>-flow-rules</code>】</p><p>这个很重要，客户端在集成nacos的sentinel配置时这个要对应</p></blockquote></li><li><p>在<code>com.alibaba.csp.sentinel.dashboard.rule.nacos.flow</code>目录下新建<code>FlowRuleNacosProvider.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alibaba.csp.sentinel.dashboard.rule.nacos.flow;<br><br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.FlowRuleEntity;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.dashboard.rule.DynamicRuleProvider;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.dashboard.rule.nacos.NacosConfigUtil;<br><span class="hljs-keyword">import</span> com.alibaba.nacos.api.config.ConfigService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Eric Zhao</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.4.0</span><br><span class="hljs-comment"> * add by tam</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component(&quot;flowRuleNacosProvider&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlowRuleNacosProvider</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DynamicRuleProvider</span>&lt;List&lt;FlowRuleEntity&gt;&gt; &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ConfigService configService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> NacosConfigUtil nacosConfigUtil;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;FlowRuleEntity&gt; <span class="hljs-title function_">getRules</span><span class="hljs-params">(String appName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> nacosConfigUtil.getRuleEntitiesFromNacos(<br>                <span class="hljs-built_in">this</span>.configService,<br>                appName,<br>                NacosConfigUtil.FLOW_DATA_ID_POSTFIX,<br>                FlowRuleEntity.class<br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个类主要从Nacos拉取规则信息</p></li><li><p>在<code>com.alibaba.csp.sentinel.dashboard.rule.nacos.flow</code>目录下新建<code>FlowRuleNacosPublisher.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alibaba.csp.sentinel.dashboard.rule.nacos.flow;<br><br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.FlowRuleEntity;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.dashboard.rule.DynamicRulePublisher;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.dashboard.rule.nacos.NacosConfigUtil;<br><span class="hljs-keyword">import</span> com.alibaba.nacos.api.config.ConfigService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Eric Zhao</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.4.0</span><br><span class="hljs-comment"> * add by tam</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component(&quot;flowRuleNacosPublisher&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlowRuleNacosPublisher</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DynamicRulePublisher</span>&lt;List&lt;FlowRuleEntity&gt;&gt; &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ConfigService configService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> NacosConfigUtil nacosConfigUtil;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">publish</span><span class="hljs-params">(String app, List&lt;FlowRuleEntity&gt; rules)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        nacosConfigUtil.setRuleStringToNacos(<br>                <span class="hljs-built_in">this</span>.configService,<br>                app,<br>                NacosConfigUtil.FLOW_DATA_ID_POSTFIX,<br>                rules<br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改<code>com.alibaba.csp.sentinel.dashboard.controller.v2.FlowControllerV2</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>   <span class="hljs-meta">@Qualifier(&quot;flowRuleNacosProvider&quot;)</span><br>   <span class="hljs-keyword">private</span> DynamicRuleProvider&lt;List&lt;FlowRuleEntity&gt;&gt; ruleProvider;<br>   <span class="hljs-meta">@Autowired</span><br>   <span class="hljs-meta">@Qualifier(&quot;flowRuleNacosPublisher&quot;)</span><br>   <span class="hljs-keyword">private</span> DynamicRulePublisher&lt;List&lt;FlowRuleEntity&gt;&gt; rulePublisher;<br></code></pre></td></tr></table></figure><p>主要增加 <code>@Qualifier(&quot;flowRuleNacosProvider&quot;)</code> 和<code>@Qualifier(&quot;flowRuleNacosPublisher&quot;)</code></p></li></ol><h4 id="Sentinel接入客户端"><a href="#Sentinel接入客户端" class="headerlink" title="Sentinel接入客户端"></a>Sentinel接入客户端</h4><p>项目如果是SpringCloud项目在pom文件里引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.csp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在<code>bootstrap.properties</code>新增如下配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8002</span><br><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">qetesh-openapi</span><br><span class="hljs-attr">spring.cloud.nacos.discovery.server-addr</span>=<span class="hljs-string">172.16.1.20:8848</span><br><span class="hljs-attr">spring.cloud.nacos.discovery.namespace</span>=<span class="hljs-string">wuyan_local</span><br><br><span class="hljs-attr">spring.cloud.sentinel.transport.dashboard</span>=<span class="hljs-string">localhost:8888</span><br><span class="hljs-attr">spring.cloud.sentinel.eager</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.cloud.sentinel.datasource.ds1.nacos.server-addr</span>=<span class="hljs-string">127.0.0.1:8848</span><br><span class="hljs-attr">spring.cloud.sentinel.datasource.ds1.nacos.dataId</span>=<span class="hljs-string">$&#123;spring.application.name&#125;-flow-rules</span><br><span class="hljs-attr">spring.cloud.sentinel.datasource.ds1.nacos.namespace</span>=<span class="hljs-string">wuyan_local</span><br><span class="hljs-attr">spring.cloud.sentinel.datasource.ds1.nacos.groupId</span>=<span class="hljs-string">DEFAULT_GROUP</span><br><span class="hljs-attr">spring.cloud.sentinel.datasource.ds1.nacos.rule-type</span>=<span class="hljs-string">flow</span><br></code></pre></td></tr></table></figure><p>注意三个参数 <code>serverAddr</code>，<code>namespace</code>，<code>groupId</code> 和Dashboard的保持一致</p><p>并且spring.cloud.sentinel.datasource.ds1.nacos.rule-type 值为flow(流控)</p><p>在启动类增加如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.annotation.SentinelResource;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QeteshOpenapiApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(QeteshOpenapiApplication.class, args);<br>    &#125;<br><br>    <span class="hljs-meta">@RestController</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br><br>        <span class="hljs-meta">@SentinelResource(&quot;ken2&quot;)</span><br>        <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;itweek.top&quot;</span>;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>启动项目访问接口，在DashBoard里就能看到相关的配置</p><p><img src="https://image.itweek.top/image/2022/04/07/20220407-155610.png" alt="DashBoard列表"></p><p>在流控规则里新增如下配置，</p><p><img src="https://image.itweek.top/image/2022/04/07/20220407-155806.png" alt="流控规则新增配置"></p><p><img src="https://image.itweek.top/image/2022/04/07/20220407-155635.png" alt="流控规则"></p><p>这时在nacos也会有相应的配置</p><p><img src="https://image.itweek.top/image/2022/04/07/20220407-155731.png" alt="nacos配置"></p><p>多次访问接口会出现 即代表流控规则限流成功</p><p><img src="https://image.itweek.top/image/2022/04/07/20220407-155654.png" alt="流控规则限流成功"></p>]]></content>
    
    
    <categories>
      
      <category>术说</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Sentinel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生产环境Sentinel改造实践（一）：Sentinel核心概念</title>
    <link href="/2023/01/10/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83Sentinel%E6%94%B9%E9%80%A0%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9ASentinel%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
    <url>/2023/01/10/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83Sentinel%E6%94%B9%E9%80%A0%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9ASentinel%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><blockquote><p>本文主要是对sentinel-dashboard源码进行改造，用在生产环境保障其高可用，主要改造点如下：</p><ol><li>接入<code>nacos</code>支持规则管理及推送</li><li>监控数据存入<code>influxDb</code>，后续可开发对应的监控组件</li><li>客户端主动推送metric</li></ol></blockquote><h3 id="二、Sentinel介绍"><a href="#二、Sentinel介绍" class="headerlink" title="二、Sentinel介绍"></a>二、Sentinel介绍</h3><p>来看下官方对Sentinel的介绍：Sentinel是分布式系统的<code>流量防卫兵</code>，组成流量防卫兵有如下特性</p><ul><li><strong>丰富的应用场景</strong>：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</li><li><strong>完备的实时监控</strong>：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</li><li><strong>广泛的开源生态</strong>：Sentinel 提供开箱即用的与其它开源框架&#x2F;库的整合模块，例如与 Spring Cloud、Apache Dubbo、gRPC、Quarkus 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。同时 Sentinel 提供 Java&#x2F;Go&#x2F;C++ 等多语言的原生实现。</li><li><strong>完善的 SPI 扩展机制</strong>：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</li></ul><p>Sentinel 的<code>主要特性</code>：</p><p><img src="https://image.itweek.top/image/2022/04/07/20220407-153036.png" alt="Sentinel-features-overview"></p><p>Sentinel 的<code>开源生态</code>：</p><p><img src="https://image.itweek.top/image/2022/04/07/20220407-153038.png" alt="Sentinel-opensource-eco"></p><p>Sentinel 分为两个部分:</p><ul><li>核心库（Java 客户端）不依赖任何框架&#x2F;库，能够运行于所有 Java 运行时环境，同时对 Dubbo &#x2F; Spring Cloud 等框架也有较好的支持。</li><li>控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。(官方提供的这个Dashboard是个简版，上生产环境需要改造)</li></ul><h3 id="三、Sentinel-控制台改造实践"><a href="#三、Sentinel-控制台改造实践" class="headerlink" title="三、Sentinel 控制台改造实践"></a>三、Sentinel 控制台改造实践</h3><h4 id="Sentinel-控制台介绍"><a href="#Sentinel-控制台介绍" class="headerlink" title="Sentinel 控制台介绍"></a>Sentinel 控制台介绍</h4><p>Sentinel 提供一个轻量级的开源控制台，它提供机器发现以及健康情况管理、监控（单机和集群），规则管理和推送的功能。</p><p>Sentinel 控制台包含如下功能:</p><ul><li><a href="https://github.com/alibaba/Sentinel/wiki/%E6%8E%A7%E5%88%B6%E5%8F%B0#4-%E6%9F%A5%E7%9C%8B%E6%9C%BA%E5%99%A8%E5%88%97%E8%A1%A8%E4%BB%A5%E5%8F%8A%E5%81%A5%E5%BA%B7%E6%83%85%E5%86%B5"><strong>查看机器列表以及健康情况</strong></a>：收集 Sentinel 客户端发送的心跳包，用于判断机器是否在线。</li><li><a href="https://github.com/alibaba/Sentinel/wiki/%E6%8E%A7%E5%88%B6%E5%8F%B0#5-%E7%9B%91%E6%8E%A7"><strong>监控 (单机和集群聚合)</strong></a>：通过 Sentinel 客户端暴露的监控 API，定期拉取并且聚合应用监控信息，最终可以实现秒级的实时监控。</li><li><a href="https://github.com/alibaba/Sentinel/wiki/%E6%8E%A7%E5%88%B6%E5%8F%B0#6-%E8%A7%84%E5%88%99%E7%AE%A1%E7%90%86%E5%8F%8A%E6%8E%A8%E9%80%81"><strong>规则管理和推送</strong></a>：统一管理推送规则。</li><li><a href="https://github.com/alibaba/Sentinel/wiki/%E6%8E%A7%E5%88%B6%E5%8F%B0#%E9%89%B4%E6%9D%83"><strong>鉴权</strong></a>：生产环境中鉴权非常重要。这里每个开发者需要根据自己的实际情况进行定制。</li></ul><h5 id="获取-Sentinel-控制台"><a href="#获取-Sentinel-控制台" class="headerlink" title="获取 Sentinel 控制台"></a>获取 Sentinel 控制台</h5><p>您可以从 <a href="https://github.com/alibaba/Sentinel/releases">release 页面</a> 下载最新版本的控制台 jar 包。</p><p>您也可以从最新版本的源码自行构建 Sentinel 控制台：</p><ul><li>下载 <a href="https://github.com/alibaba/Sentinel/tree/master/sentinel-dashboard">控制台</a> 工程</li><li>使用以下命令将代码打包成一个 fat jar: <code>mvn clean package</code></li></ul><h5 id="启动控制台"><a href="#启动控制台" class="headerlink" title="启动控制台"></a>启动控制台</h5><blockquote><p><strong>注意</strong>：启动 Sentinel 控制台需要 JDK 版本为 1.8 及以上版本。</p></blockquote><p>使用如下命令启动控制台：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar<br></code></pre></td></tr></table></figure><p>其中 <code>-Dserver.port=8080</code> 用于指定 Sentinel 控制台端口为 <code>8080</code>。</p><p>从 Sentinel 1.6.0 起，Sentinel 控制台引入基本的<strong>登录</strong>功能，默认用户名和密码都是 <code>sentinel</code>。可以参考 <a href="https://github.com/alibaba/Sentinel/wiki/%E6%8E%A7%E5%88%B6%E5%8F%B0#%E9%89%B4%E6%9D%83">鉴权模块文档</a> 配置用户名和密码。</p><blockquote><p>注：若您的应用为 Spring Boot 或 Spring Cloud 应用，您可以通过 Spring 配置文件来指定配置，详情请参考 <a href="https://github.com/spring-cloud-incubator/spring-cloud-alibaba/wiki/Sentinel">Spring Cloud Alibaba Sentinel 文档</a>。</p></blockquote><p>关于控制台界面的操作流程这里就不再赘述，详情见 <a href="https://github.com/alibaba/Sentinel/wiki/%E6%8E%A7%E5%88%B6%E5%8F%B0">Sentinel 控制台</a></p><p>本文基于 <a href="https://github.com/alibaba/Sentinel/tree/master/sentinel-dashboard">控制台Dashboard项目</a> 工程基于改造</p><h4 id="Sentinel-Dashboard工程介绍"><a href="#Sentinel-Dashboard工程介绍" class="headerlink" title="Sentinel Dashboard工程介绍"></a>Sentinel Dashboard工程介绍</h4><p><a href="https://github.com/alibaba/Sentinel.git">Sentinel整体项目地址</a>，其实只需要下载sentinel-dashboard模块即可。</p><h4 id="在生产环境使用Sentinel"><a href="#在生产环境使用Sentinel" class="headerlink" title="在生产环境使用Sentinel"></a>在生产环境使用Sentinel</h4><h5 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h5><p>生产环境的 Sentinel Dashboard 需要具备下面几个特性:</p><ul><li>**<a href="https://github.com/alibaba/Sentinel/wiki/%E5%9C%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E4%BD%BF%E7%94%A8-Sentinel#%E8%A7%84%E5%88%99%E7%AE%A1%E7%90%86%E5%8F%8A%E6%8E%A8%E9%80%81">规则管理及推送</a>**，集中管理和推送规则。<code>sentinel-core</code> 提供 API 和扩展接口来接收信息。开发者需要根据自己的环境，选取一个可靠的推送规则方式；同时，规则最好在控制台中集中管理。</li><li>**<a href="https://github.com/alibaba/Sentinel/wiki/%E5%9C%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E4%BD%BF%E7%94%A8-Sentinel#%E7%9B%91%E6%8E%A7">监控</a>**，支持可靠、快速的实时监控和历史监控数据查询。<code>sentinel-core</code> 记录秒级的资源运行情况，并且提供 API 来拉取资源运行信息。当机器大于一台以上的时候，可以通过 Dashboard 来拉取，聚合，并且存储这些信息。这个时候，Dashboard 需要有一个存储媒介，来存储历史运行情况。</li><li><strong>权限控制</strong>，区分用户角色，来进行操作。生产环境下的权限控制是非常重要的，理论上只有管理员等高级用户才有权限去修改应用的规则。</li></ul><p>本次改造主要改造<code>规则管理及推送</code>和<code>监控</code></p><h5 id="规则管理及推送"><a href="#规则管理及推送" class="headerlink" title="规则管理及推送"></a>规则管理及推送</h5><h6 id="规则管理及推送模式介绍"><a href="#规则管理及推送模式介绍" class="headerlink" title="规则管理及推送模式介绍"></a>规则管理及推送模式介绍</h6><p>一般来说，规则的推送有下面三种模式:</p><table><thead><tr><th>推送模式</th><th>说明</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><a href="https://github.com/alibaba/Sentinel/wiki/%E5%9C%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E4%BD%BF%E7%94%A8-Sentinel#%E5%8E%9F%E5%A7%8B%E6%A8%A1%E5%BC%8F">原始模式</a></td><td>API 将规则推送至客户端并直接更新到内存中，扩展写数据源（<a href="https://github.com/alibaba/Sentinel/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%99%E6%89%A9%E5%B1%95"><code>WritableDataSource</code></a>）</td><td>简单，无任何依赖</td><td>不保证一致性；规则保存在内存中，重启即消失。严重不建议用于生产环境</td></tr><tr><td><a href="https://github.com/alibaba/Sentinel/wiki/%E5%9C%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E4%BD%BF%E7%94%A8-Sentinel#Pull%E6%A8%A1%E5%BC%8F">Pull 模式</a></td><td>扩展写数据源（<a href="https://github.com/alibaba/Sentinel/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%99%E6%89%A9%E5%B1%95"><code>WritableDataSource</code></a>）， 客户端主动向某个规则管理中心定期轮询拉取规则，这个规则中心可以是 RDBMS、文件 等</td><td>简单，无任何依赖；规则持久化</td><td>不保证一致性；实时性不保证，拉取过于频繁也可能会有性能问题。</td></tr><tr><td><strong><a href="https://github.com/alibaba/Sentinel/wiki/%E5%9C%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E4%BD%BF%E7%94%A8-Sentinel#Push%E6%A8%A1%E5%BC%8F">Push 模式</a></strong></td><td>扩展读数据源（<a href="https://github.com/alibaba/Sentinel/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%99%E6%89%A9%E5%B1%95"><code>ReadableDataSource</code></a>），规则中心统一推送，客户端通过注册监听器的方式时刻监听变化，比如使用 Nacos、Zookeeper 等配置中心。这种方式有更好的实时性和一致性保证。<strong>生产环境下一般采用 push 模式的数据源。</strong></td><td>规则持久化；一致性；快速</td><td>引入第三方依赖</td></tr></tbody></table><ul><li><p><code>原始模式</code></p><p><img src="https://image.itweek.top/image/2022/04/07/20220407-153154" alt="Original push rules from Sentinel Dashboard"></p></li><li><p><code>Pull模式</code></p><p><img src="https://image.itweek.top/image/2022/04/07/20220407-153153" alt="Push rules from Sentinel Dashboard to local file"></p></li><li><p><code>Push模式</code></p><p>生产环境下一般更常用的是 push 模式的数据源。对于 push 模式的数据源,如远程配置中心（ZooKeeper, Nacos, Apollo等等），推送的操作不应由 Sentinel 客户端进行，而应该经控制台统一进行管理，直接进行推送，数据源仅负责获取配置中心推送的配置并更新到本地。因此推送规则正确做法应该是 <strong>配置中心控制台&#x2F;Sentinel 控制台 → 配置中心 → Sentinel 数据源 → Sentinel</strong>，而不是经 Sentinel 数据源推送至配置中心。这样的流程就非常清晰了：</p><p><img src="https://image.itweek.top/image/2022/04/07/20220407-153154.png" alt="Remote push rules to config center"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>术说</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Sentinel</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
